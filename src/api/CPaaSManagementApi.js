/**
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CPAASError from '../model/CPAASError';
import ServiceAdminUserAddData from '../model/ServiceAdminUserAddData';
import ServiceAdminUserEditData from '../model/ServiceAdminUserEditData';
import ServiceDocsAdminUserDelete from '../model/ServiceDocsAdminUserDelete';
import ServiceDocsAdminUserGetAll from '../model/ServiceDocsAdminUserGetAll';
import ServiceDocsAdminUserGetSingle from '../model/ServiceDocsAdminUserGetSingle';

/**
* CPaaSManagement service.
* @module api/CPaaSManagementApi
* @version 1.1
*/
export default class CPaaSManagementApi {

    /**
    * Constructs a new CPaaSManagementApi. 
    * @alias module:api/CPaaSManagementApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1MgmtUserGet operation.
     * @callback module:api/CPaaSManagementApi~v1MgmtUserGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsAdminUserGetAll} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All CPaaS Users
     * Retrieve a list of all CPaaS users in an account.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] number of records to return, range 1 to 100
     * @param {String} [startKey] unique to fetch next records
     * @param {String} [sort] sorting the records by email(default)/role/first_name/last_name, _A is for ascending and _D is for descending, eg: sort=role_A,email_D
     * @param {String} [email] Email
     * @param {String} [role] User Role
     * @param {String} [firstName] First Name
     * @param {String} [lastName] Last Name
     * @param {module:api/CPaaSManagementApi~v1MgmtUserGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsAdminUserGetAll}
     */
    v1MgmtUserGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page_size': opts['pageSize'],
        'start_key': opts['startKey'],
        'sort': opts['sort'],
        'email': opts['email'],
        'role': opts['role'],
        'first_name': opts['firstName'],
        'last_name': opts['lastName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ServiceDocsAdminUserGetAll;
      return this.apiClient.callApi(
        '/v1/mgmt/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MgmtUserPost operation.
     * @callback module:api/CPaaSManagementApi~v1MgmtUserPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsAdminUserGetSingle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invite CPaaS User
     * Link a new CPaaS user to an existing client account.
     * @param {module:model/ServiceAdminUserAddData} reqBody payload fields
     * @param {module:api/CPaaSManagementApi~v1MgmtUserPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsAdminUserGetSingle}
     */
    v1MgmtUserPost(reqBody, callback) {
      let postBody = reqBody;
      // verify the required parameter 'reqBody' is set
      if (reqBody === undefined || reqBody === null) {
        throw new Error("Missing the required parameter 'reqBody' when calling v1MgmtUserPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ServiceDocsAdminUserGetSingle;
      return this.apiClient.callApi(
        '/v1/mgmt/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MgmtUserUserIDDelete operation.
     * @callback module:api/CPaaSManagementApi~v1MgmtUserUserIDDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsAdminUserDelete} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete CPaaS User
     * Delete a CPaaS user from the associated account.
     * @param {String} userID User ID, numeric
     * @param {module:api/CPaaSManagementApi~v1MgmtUserUserIDDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsAdminUserDelete}
     */
    v1MgmtUserUserIDDelete(userID, callback) {
      let postBody = null;
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling v1MgmtUserUserIDDelete");
      }

      let pathParams = {
        'userID': userID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ServiceDocsAdminUserDelete;
      return this.apiClient.callApi(
        '/v1/mgmt/user/{userID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MgmtUserUserIDGet operation.
     * @callback module:api/CPaaSManagementApi~v1MgmtUserUserIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsAdminUserGetSingle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CPaaS User Details
     * View details about each CPaaS user in an account.
     * @param {String} userID User ID, numeric
     * @param {module:api/CPaaSManagementApi~v1MgmtUserUserIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsAdminUserGetSingle}
     */
    v1MgmtUserUserIDGet(userID, callback) {
      let postBody = null;
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling v1MgmtUserUserIDGet");
      }

      let pathParams = {
        'userID': userID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ServiceDocsAdminUserGetSingle;
      return this.apiClient.callApi(
        '/v1/mgmt/user/{userID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1MgmtUserUserIDPut operation.
     * @callback module:api/CPaaSManagementApi~v1MgmtUserUserIDPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsAdminUserGetSingle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update CPaaS User Role
     * Update a CPaaS user's role within a client's account.
     * @param {String} userID User ID, numeric
     * @param {module:model/ServiceAdminUserEditData} reqBody payload fields
     * @param {module:api/CPaaSManagementApi~v1MgmtUserUserIDPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsAdminUserGetSingle}
     */
    v1MgmtUserUserIDPut(userID, reqBody, callback) {
      let postBody = reqBody;
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling v1MgmtUserUserIDPut");
      }
      // verify the required parameter 'reqBody' is set
      if (reqBody === undefined || reqBody === null) {
        throw new Error("Missing the required parameter 'reqBody' when calling v1MgmtUserUserIDPut");
      }

      let pathParams = {
        'userID': userID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ServiceDocsAdminUserGetSingle;
      return this.apiClient.callApi(
        '/v1/mgmt/user/{userID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
