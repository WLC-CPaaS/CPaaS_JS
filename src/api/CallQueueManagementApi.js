/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package api;

import com.sun.jersey.api.client.GenericType;

import .ApiException;
import .ApiClient;
import .Configuration;
import model.*;
import .Pair;

import ServiceAPIResponse;
import ServiceDocsCallQueueGetAll;
import ServiceDocsCallQueueGetRoles;
import ServiceDocsCallQueueGetSingle;
import ServiceDocsCallQueueGetSingleStatus;
import ServiceVOIPCallQueueAddEditData;
import ServiceVOIPCallQueueRoleAssignData;
import UtilCPAASError;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@.annotation.Generated(value = "org.openapitools.codegen.languages.JavascriptClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class CallQueueManagementApi {
  private ApiClient apiClient;

  public CallQueueManagementApi() {
    this(Configuration.getDefaultApiClient());
  }

  public CallQueueManagementApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Get Call Queues
   * Retrieve call queue details for an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @return ServiceDocsCallQueueGetAll
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsCallQueueGetAll v1AccountAccountIDCallqueueGet(String accountID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/callqueue"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsCallQueueGetAll> localVarReturnType = new GenericType<ServiceDocsCallQueueGetAll>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Create Call Queue
   * Set up a call queue in an account for specific inbound calls.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param reqBody payload fields (required)
   * @return ServiceDocsCallQueueGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsCallQueueGetSingle v1AccountAccountIDCallqueuePost(String accountID, ServiceVOIPCallQueueAddEditData reqBody) throws ApiException {
    Object localVarPostBody = reqBody;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueuePost");
    }
    
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      throw new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDCallqueuePost");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/callqueue"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsCallQueueGetSingle> localVarReturnType = new GenericType<ServiceDocsCallQueueGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Delete Call Queue
   * Remove the call queue from an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param queueID Queue ID, 32 alpha numeric (required)
   * @return ServiceDocsCallQueueGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsCallQueueGetSingle v1AccountAccountIDCallqueueQueueIDDelete(String accountID, String queueID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueQueueIDDelete");
    }
    
    // verify the required parameter 'queueID' is set
    if (queueID == null) {
      throw new ApiException(400, "Missing the required parameter 'queueID' when calling v1AccountAccountIDCallqueueQueueIDDelete");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/callqueue/{queueID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "queueID" + "\\}", apiClient.escapeString(queueID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsCallQueueGetSingle> localVarReturnType = new GenericType<ServiceDocsCallQueueGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get Call Queue Details
   * Capture metadata about a specific queue, such as queue_type and agent_wrapup_time.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param queueID Queue ID, 32 alpha numeric (required)
   * @return ServiceDocsCallQueueGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsCallQueueGetSingle v1AccountAccountIDCallqueueQueueIDGet(String accountID, String queueID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueQueueIDGet");
    }
    
    // verify the required parameter 'queueID' is set
    if (queueID == null) {
      throw new ApiException(400, "Missing the required parameter 'queueID' when calling v1AccountAccountIDCallqueueQueueIDGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/callqueue/{queueID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "queueID" + "\\}", apiClient.escapeString(queueID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsCallQueueGetSingle> localVarReturnType = new GenericType<ServiceDocsCallQueueGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Update Call Queue
   * Update the metadata mentioned above.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param queueID Queue ID, 32 alpha numeric (required)
   * @param reqBody payload fields (required)
   * @return ServiceDocsCallQueueGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsCallQueueGetSingle v1AccountAccountIDCallqueueQueueIDPut(String accountID, String queueID, ServiceVOIPCallQueueAddEditData reqBody) throws ApiException {
    Object localVarPostBody = reqBody;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueQueueIDPut");
    }
    
    // verify the required parameter 'queueID' is set
    if (queueID == null) {
      throw new ApiException(400, "Missing the required parameter 'queueID' when calling v1AccountAccountIDCallqueueQueueIDPut");
    }
    
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      throw new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDCallqueueQueueIDPut");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/callqueue/{queueID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "queueID" + "\\}", apiClient.escapeString(queueID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsCallQueueGetSingle> localVarReturnType = new GenericType<ServiceDocsCallQueueGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get Call Queue Status
   * Access the status of a call queue in an account, such as the number of available agents (recipients), estimated wait time, and number of active sessions.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param queueID Queue ID, 32 alpha numeric (required)
   * @return ServiceDocsCallQueueGetSingleStatus
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsCallQueueGetSingleStatus v1AccountAccountIDCallqueueQueueIDStatusGet(String accountID, String queueID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDCallqueueQueueIDStatusGet");
    }
    
    // verify the required parameter 'queueID' is set
    if (queueID == null) {
      throw new ApiException(400, "Missing the required parameter 'queueID' when calling v1AccountAccountIDCallqueueQueueIDStatusGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/callqueue/{queueID}/status"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "queueID" + "\\}", apiClient.escapeString(queueID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsCallQueueGetSingleStatus> localVarReturnType = new GenericType<ServiceDocsCallQueueGetSingleStatus>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get Queue Roles of Account
   * Obtain data about each queue role in an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @return ServiceDocsCallQueueGetRoles
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsCallQueueGetRoles v1AccountAccountIDQueuerolesGet(String accountID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDQueuerolesGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/queueroles"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsCallQueueGetRoles> localVarReturnType = new GenericType<ServiceDocsCallQueueGetRoles>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Assign Queue Role to Call Queue
   * Assign roles to members in a call queue.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param queueID Queue ID, 32 alpha numeric (required)
   * @param reqBody payload fields (required)
   * @return ServiceAPIResponse
   * @throws ApiException if fails to make API call
   */
  public ServiceAPIResponse v1AccountAccountIDQueuerolesQueueIDPost(String accountID, String queueID, ServiceVOIPCallQueueRoleAssignData reqBody) throws ApiException {
    Object localVarPostBody = reqBody;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDQueuerolesQueueIDPost");
    }
    
    // verify the required parameter 'queueID' is set
    if (queueID == null) {
      throw new ApiException(400, "Missing the required parameter 'queueID' when calling v1AccountAccountIDQueuerolesQueueIDPost");
    }
    
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      throw new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDQueuerolesQueueIDPost");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/queueroles/{queueID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "queueID" + "\\}", apiClient.escapeString(queueID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceAPIResponse> localVarReturnType = new GenericType<ServiceAPIResponse>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
