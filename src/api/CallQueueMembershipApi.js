/**
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CPAASError from '../model/CPAASError';
import ServiceAPIResponse from '../model/ServiceAPIResponse';
import ServiceDocsCallQueueMemberGetSingle from '../model/ServiceDocsCallQueueMemberGetSingle';
import ServiceVOIPCallQueueEnableMembershipData from '../model/ServiceVOIPCallQueueEnableMembershipData';
import ServiceVOIPQueueMembershipAddData from '../model/ServiceVOIPQueueMembershipAddData';

/**
* CallQueueMembership service.
* @module api/CallQueueMembershipApi
* @version 1.1
*/
export default class CallQueueMembershipApi {

    /**
    * Constructs a new CallQueueMembershipApi. 
    * @alias module:api/CallQueueMembershipApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1AccountAccountIDQueuemembershipPost operation.
     * @callback module:api/CallQueueMembershipApi~v1AccountAccountIDQueuemembershipPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsCallQueueMemberGetSingle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Grant Queue Membership to User
     * Allow users to create queue memberships for recipients.
     * @param {String} accountID Account ID, 32 alpha numeric
     * @param {module:model/ServiceVOIPQueueMembershipAddData} reqBody payload fields
     * @param {module:api/CallQueueMembershipApi~v1AccountAccountIDQueuemembershipPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsCallQueueMemberGetSingle}
     */
    v1AccountAccountIDQueuemembershipPost(accountID, reqBody, callback) {
      let postBody = reqBody;
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling v1AccountAccountIDQueuemembershipPost");
      }
      // verify the required parameter 'reqBody' is set
      if (reqBody === undefined || reqBody === null) {
        throw new Error("Missing the required parameter 'reqBody' when calling v1AccountAccountIDQueuemembershipPost");
      }

      let pathParams = {
        'accountID': accountID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServiceDocsCallQueueMemberGetSingle;
      return this.apiClient.callApi(
        '/v1/account/{accountID}/queuemembership', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AccountAccountIDQueuemembershipRecipientIDDisablePost operation.
     * @callback module:api/CallQueueMembershipApi~v1AccountAccountIDQueuemembershipRecipientIDDisablePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceAPIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable Queue Membership
     * Deactivate queue membership for a recipient.
     * @param {String} accountID Account ID, 32 alpha numeric
     * @param {String} recipientID Recipient ID, 32 alpha numeric
     * @param {module:api/CallQueueMembershipApi~v1AccountAccountIDQueuemembershipRecipientIDDisablePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceAPIResponse}
     */
    v1AccountAccountIDQueuemembershipRecipientIDDisablePost(accountID, recipientID, callback) {
      let postBody = null;
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling v1AccountAccountIDQueuemembershipRecipientIDDisablePost");
      }
      // verify the required parameter 'recipientID' is set
      if (recipientID === undefined || recipientID === null) {
        throw new Error("Missing the required parameter 'recipientID' when calling v1AccountAccountIDQueuemembershipRecipientIDDisablePost");
      }

      let pathParams = {
        'accountID': accountID,
        'recipientID': recipientID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceAPIResponse;
      return this.apiClient.callApi(
        '/v1/account/{accountID}/queuemembership/{recipientID}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AccountAccountIDQueuemembershipRecipientIDEnablePost operation.
     * @callback module:api/CallQueueMembershipApi~v1AccountAccountIDQueuemembershipRecipientIDEnablePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceAPIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable Queue Membership
     * Activate queue membership for a recipient.
     * @param {String} accountID Account ID, 32 alpha numeric
     * @param {String} recipientID Recipient ID, 32 alpha numeric
     * @param {module:model/ServiceVOIPCallQueueEnableMembershipData} reqBody payload fields
     * @param {module:api/CallQueueMembershipApi~v1AccountAccountIDQueuemembershipRecipientIDEnablePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceAPIResponse}
     */
    v1AccountAccountIDQueuemembershipRecipientIDEnablePost(accountID, recipientID, reqBody, callback) {
      let postBody = reqBody;
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling v1AccountAccountIDQueuemembershipRecipientIDEnablePost");
      }
      // verify the required parameter 'recipientID' is set
      if (recipientID === undefined || recipientID === null) {
        throw new Error("Missing the required parameter 'recipientID' when calling v1AccountAccountIDQueuemembershipRecipientIDEnablePost");
      }
      // verify the required parameter 'reqBody' is set
      if (reqBody === undefined || reqBody === null) {
        throw new Error("Missing the required parameter 'reqBody' when calling v1AccountAccountIDQueuemembershipRecipientIDEnablePost");
      }

      let pathParams = {
        'accountID': accountID,
        'recipientID': recipientID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServiceAPIResponse;
      return this.apiClient.callApi(
        '/v1/account/{accountID}/queuemembership/{recipientID}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
