/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package api;

import com.sun.jersey.api.client.GenericType;

import .ApiException;
import .ApiClient;
import .Configuration;
import model.*;
import .Pair;

import ServiceAPIResponse;
import ServiceDocsCallQueueMemberGetSingle;
import ServiceVOIPCallQueueEnableMembershipData;
import ServiceVOIPQueueMembershipAddData;
import UtilCPAASError;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@.annotation.Generated(value = "org.openapitools.codegen.languages.JavascriptClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class CallQueueMembershipApi {
  private ApiClient apiClient;

  public CallQueueMembershipApi() {
    this(Configuration.getDefaultApiClient());
  }

  public CallQueueMembershipApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Grant Queue Membership to User
   * Allow users to create queue memberships for recipients.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param reqBody payload fields (required)
   * @return ServiceDocsCallQueueMemberGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsCallQueueMemberGetSingle v1AccountAccountIDQueuemembershipPost(String accountID, ServiceVOIPQueueMembershipAddData reqBody) throws ApiException {
    Object localVarPostBody = reqBody;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDQueuemembershipPost");
    }
    
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      throw new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDQueuemembershipPost");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/queuemembership"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsCallQueueMemberGetSingle> localVarReturnType = new GenericType<ServiceDocsCallQueueMemberGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Disable Queue Membership
   * Deactivate queue membership for a recipient.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param recipientID Recipient ID, 32 alpha numeric (required)
   * @return ServiceAPIResponse
   * @throws ApiException if fails to make API call
   */
  public ServiceAPIResponse v1AccountAccountIDQueuemembershipRecipientIDDisablePost(String accountID, String recipientID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDQueuemembershipRecipientIDDisablePost");
    }
    
    // verify the required parameter 'recipientID' is set
    if (recipientID == null) {
      throw new ApiException(400, "Missing the required parameter 'recipientID' when calling v1AccountAccountIDQueuemembershipRecipientIDDisablePost");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/queuemembership/{recipientID}/disable"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "recipientID" + "\\}", apiClient.escapeString(recipientID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceAPIResponse> localVarReturnType = new GenericType<ServiceAPIResponse>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Enable Queue Membership
   * Activate queue membership for a recipient.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param recipientID Recipient ID, 32 alpha numeric (required)
   * @param reqBody payload fields (required)
   * @return ServiceAPIResponse
   * @throws ApiException if fails to make API call
   */
  public ServiceAPIResponse v1AccountAccountIDQueuemembershipRecipientIDEnablePost(String accountID, String recipientID, ServiceVOIPCallQueueEnableMembershipData reqBody) throws ApiException {
    Object localVarPostBody = reqBody;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDQueuemembershipRecipientIDEnablePost");
    }
    
    // verify the required parameter 'recipientID' is set
    if (recipientID == null) {
      throw new ApiException(400, "Missing the required parameter 'recipientID' when calling v1AccountAccountIDQueuemembershipRecipientIDEnablePost");
    }
    
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      throw new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDQueuemembershipRecipientIDEnablePost");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/queuemembership/{recipientID}/enable"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "recipientID" + "\\}", apiClient.escapeString(recipientID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceAPIResponse> localVarReturnType = new GenericType<ServiceAPIResponse>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
