/**
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CPAASError from '../model/CPAASError';
import ServiceAPIResponse from '../model/ServiceAPIResponse';
import ServiceDocsCallQueueRecipientLoginLogoutOutput from '../model/ServiceDocsCallQueueRecipientLoginLogoutOutput';
import ServiceDocsGetQueueRecipients from '../model/ServiceDocsGetQueueRecipients';
import ServiceVOIPCallQueueRecipientLoginLogoutData from '../model/ServiceVOIPCallQueueRecipientLoginLogoutData';
import ServiceVOIPCallQueueRecipientStatusData from '../model/ServiceVOIPCallQueueRecipientStatusData';

/**
* CallQueueRecipient service.
* @module api/CallQueueRecipientApi
* @version 1.1
*/
export default class CallQueueRecipientApi {

    /**
    * Constructs a new CallQueueRecipientApi. 
    * @alias module:api/CallQueueRecipientApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1AccountAccountIDLoginrecipientRecipientIDPost operation.
     * @callback module:api/CallQueueRecipientApi~v1AccountAccountIDLoginrecipientRecipientIDPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsCallQueueRecipientLoginLogoutOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login as Recipient
     * Agents must log in to receive calls. Depending on their membership, they can log in to one or more queues. (If an agent is a member of more than one queue, they will receive calls from all the queues they are a part of.)
     * @param {String} accountID Account ID, 32 alpha numeric
     * @param {String} recipientID Recipient ID, 32 alpha numeric
     * @param {module:model/ServiceVOIPCallQueueRecipientLoginLogoutData} reqBody payload fields
     * @param {module:api/CallQueueRecipientApi~v1AccountAccountIDLoginrecipientRecipientIDPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsCallQueueRecipientLoginLogoutOutput}
     */
    v1AccountAccountIDLoginrecipientRecipientIDPost(accountID, recipientID, reqBody, callback) {
      let postBody = reqBody;
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling v1AccountAccountIDLoginrecipientRecipientIDPost");
      }
      // verify the required parameter 'recipientID' is set
      if (recipientID === undefined || recipientID === null) {
        throw new Error("Missing the required parameter 'recipientID' when calling v1AccountAccountIDLoginrecipientRecipientIDPost");
      }
      // verify the required parameter 'reqBody' is set
      if (reqBody === undefined || reqBody === null) {
        throw new Error("Missing the required parameter 'reqBody' when calling v1AccountAccountIDLoginrecipientRecipientIDPost");
      }

      let pathParams = {
        'accountID': accountID,
        'recipientID': recipientID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServiceDocsCallQueueRecipientLoginLogoutOutput;
      return this.apiClient.callApi(
        '/v1/account/{accountID}/loginrecipient/{recipientID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AccountAccountIDQueuerecipientGet operation.
     * @callback module:api/CallQueueRecipientApi~v1AccountAccountIDQueuerecipientGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsGetQueueRecipients} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change Recipient Status
     * Get a list of all recipients in an account.
     * @param {String} accountID Account ID, 32 alpha numeric
     * @param {module:api/CallQueueRecipientApi~v1AccountAccountIDQueuerecipientGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsGetQueueRecipients}
     */
    v1AccountAccountIDQueuerecipientGet(accountID, callback) {
      let postBody = null;
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling v1AccountAccountIDQueuerecipientGet");
      }

      let pathParams = {
        'accountID': accountID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceDocsGetQueueRecipients;
      return this.apiClient.callApi(
        '/v1/account/{accountID}/queuerecipient', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AccountAccountIDRecipientRecipientIDStatusPost operation.
     * @callback module:api/CallQueueRecipientApi~v1AccountAccountIDRecipientRecipientIDStatusPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceAPIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Recipient List
     * Change the status of a recipient to ready, away, etc.
     * @param {String} accountID Account ID, 32 alpha numeric
     * @param {String} recipientID Recipient ID, 32 alpha numeric
     * @param {module:model/ServiceVOIPCallQueueRecipientStatusData} reqBody payload fields
     * @param {module:api/CallQueueRecipientApi~v1AccountAccountIDRecipientRecipientIDStatusPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceAPIResponse}
     */
    v1AccountAccountIDRecipientRecipientIDStatusPost(accountID, recipientID, reqBody, callback) {
      let postBody = reqBody;
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling v1AccountAccountIDRecipientRecipientIDStatusPost");
      }
      // verify the required parameter 'recipientID' is set
      if (recipientID === undefined || recipientID === null) {
        throw new Error("Missing the required parameter 'recipientID' when calling v1AccountAccountIDRecipientRecipientIDStatusPost");
      }
      // verify the required parameter 'reqBody' is set
      if (reqBody === undefined || reqBody === null) {
        throw new Error("Missing the required parameter 'reqBody' when calling v1AccountAccountIDRecipientRecipientIDStatusPost");
      }

      let pathParams = {
        'accountID': accountID,
        'recipientID': recipientID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServiceAPIResponse;
      return this.apiClient.callApi(
        '/v1/account/{accountID}/recipient/{recipientID}/status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
