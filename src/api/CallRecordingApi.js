/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package api;

import com.sun.jersey.api.client.GenericType;

import .ApiException;
import .ApiClient;
import .Configuration;
import model.*;
import .Pair;

import ServiceDocsCallRecordingGetAll;
import ServiceDocsCallRecordingGetSingle;
import UtilCPAASError;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@.annotation.Generated(value = "org.openapitools.codegen.languages.JavascriptClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class CallRecordingApi {
  private ApiClient apiClient;

  public CallRecordingApi() {
    this(Configuration.getDefaultApiClient());
  }

  public CallRecordingApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Get Account Call Recording
   * Obtain a list of the call recordings within an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @return ServiceDocsCallRecordingGetAll
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsCallRecordingGetAll v1AccountAccountIDRecordingGet(String accountID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDRecordingGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/recording"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsCallRecordingGetAll> localVarReturnType = new GenericType<ServiceDocsCallRecordingGetAll>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Delete Call Recording
   * Delete a single call recording from an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param recordingID Recording ID, 39 (yyyymm-&lt;32 id&gt;) (required)
   * @return ServiceDocsCallRecordingGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsCallRecordingGetSingle v1AccountAccountIDRecordingRecordingIDDelete(String accountID, String recordingID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDRecordingRecordingIDDelete");
    }
    
    // verify the required parameter 'recordingID' is set
    if (recordingID == null) {
      throw new ApiException(400, "Missing the required parameter 'recordingID' when calling v1AccountAccountIDRecordingRecordingIDDelete");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/recording/{recordingID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "recordingID" + "\\}", apiClient.escapeString(recordingID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsCallRecordingGetSingle> localVarReturnType = new GenericType<ServiceDocsCallRecordingGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get Call Recording Details
   * Access details for each recorded call in an account (e.g., duration, names and numbers of call participants, etc.).
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param recordingID Recording ID, 39 (yyyymm-&lt;32 id&gt;) (required)
   * @return ServiceDocsCallRecordingGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsCallRecordingGetSingle v1AccountAccountIDRecordingRecordingIDGet(String accountID, String recordingID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDRecordingRecordingIDGet");
    }
    
    // verify the required parameter 'recordingID' is set
    if (recordingID == null) {
      throw new ApiException(400, "Missing the required parameter 'recordingID' when calling v1AccountAccountIDRecordingRecordingIDGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/recording/{recordingID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "recordingID" + "\\}", apiClient.escapeString(recordingID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json", "audio/mp3", "audio/mpeg", "audio/mpeg3", "audio/x-wav", "audio/wav"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsCallRecordingGetSingle> localVarReturnType = new GenericType<ServiceDocsCallRecordingGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get User Call Recording
   * Retrieve a list of call recordings for a user within an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param userID User ID, 32 alpha numeric (required)
   * @return ServiceDocsCallRecordingGetAll
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsCallRecordingGetAll v1AccountAccountIDUserUserIDRecordingGet(String accountID, String userID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDUserUserIDRecordingGet");
    }
    
    // verify the required parameter 'userID' is set
    if (userID == null) {
      throw new ApiException(400, "Missing the required parameter 'userID' when calling v1AccountAccountIDUserUserIDRecordingGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/user/{userID}/recording"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "userID" + "\\}", apiClient.escapeString(userID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsCallRecordingGetAll> localVarReturnType = new GenericType<ServiceDocsCallRecordingGetAll>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
