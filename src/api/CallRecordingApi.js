/**
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ServiceDocsCallRecordingGetAll from '../model/ServiceDocsCallRecordingGetAll';
import ServiceDocsCallRecordingGetSingle from '../model/ServiceDocsCallRecordingGetSingle';
import UtilCPAASError from '../model/UtilCPAASError';

/**
* CallRecording service.
* @module api/CallRecordingApi
* @version 1.1
*/
export default class CallRecordingApi {

    /**
    * Constructs a new CallRecordingApi. 
    * @alias module:api/CallRecordingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1AccountAccountIDRecordingGet operation.
     * @callback module:api/CallRecordingApi~v1AccountAccountIDRecordingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsCallRecordingGetAll} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Account Call Recording
     * Obtain a list of the call recordings within an account.
     * @param {String} accountID Account ID, 32 alpha numeric
     * @param {module:api/CallRecordingApi~v1AccountAccountIDRecordingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsCallRecordingGetAll}
     */
    v1AccountAccountIDRecordingGet(accountID, callback) {
      let postBody = null;
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling v1AccountAccountIDRecordingGet");
      }

      let pathParams = {
        'accountID': accountID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceDocsCallRecordingGetAll;
      return this.apiClient.callApi(
        '/v1/account/{accountID}/recording', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AccountAccountIDRecordingRecordingIDDelete operation.
     * @callback module:api/CallRecordingApi~v1AccountAccountIDRecordingRecordingIDDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsCallRecordingGetSingle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Call Recording
     * Delete a single call recording from an account.
     * @param {String} accountID Account ID, 32 alpha numeric
     * @param {String} recordingID Recording ID, 39 (yyyymm-<32 id>)
     * @param {module:api/CallRecordingApi~v1AccountAccountIDRecordingRecordingIDDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsCallRecordingGetSingle}
     */
    v1AccountAccountIDRecordingRecordingIDDelete(accountID, recordingID, callback) {
      let postBody = null;
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling v1AccountAccountIDRecordingRecordingIDDelete");
      }
      // verify the required parameter 'recordingID' is set
      if (recordingID === undefined || recordingID === null) {
        throw new Error("Missing the required parameter 'recordingID' when calling v1AccountAccountIDRecordingRecordingIDDelete");
      }

      let pathParams = {
        'accountID': accountID,
        'recordingID': recordingID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceDocsCallRecordingGetSingle;
      return this.apiClient.callApi(
        '/v1/account/{accountID}/recording/{recordingID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AccountAccountIDRecordingRecordingIDGet operation.
     * @callback module:api/CallRecordingApi~v1AccountAccountIDRecordingRecordingIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsCallRecordingGetSingle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Call Recording Details
     * Access details for each recorded call in an account (e.g., duration, names and numbers of call participants, etc.).
     * @param {String} accountID Account ID, 32 alpha numeric
     * @param {String} recordingID Recording ID, 39 (yyyymm-<32 id>)
     * @param {module:api/CallRecordingApi~v1AccountAccountIDRecordingRecordingIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsCallRecordingGetSingle}
     */
    v1AccountAccountIDRecordingRecordingIDGet(accountID, recordingID, callback) {
      let postBody = null;
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling v1AccountAccountIDRecordingRecordingIDGet");
      }
      // verify the required parameter 'recordingID' is set
      if (recordingID === undefined || recordingID === null) {
        throw new Error("Missing the required parameter 'recordingID' when calling v1AccountAccountIDRecordingRecordingIDGet");
      }

      let pathParams = {
        'accountID': accountID,
        'recordingID': recordingID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'audio/mp3', 'audio/mpeg', 'audio/mpeg3', 'audio/x-wav', 'audio/wav'];
      let returnType = ServiceDocsCallRecordingGetSingle;
      return this.apiClient.callApi(
        '/v1/account/{accountID}/recording/{recordingID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AccountAccountIDUserUserIDRecordingGet operation.
     * @callback module:api/CallRecordingApi~v1AccountAccountIDUserUserIDRecordingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsCallRecordingGetAll} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User Call Recording
     * Retrieve a list of call recordings for a user within an account.
     * @param {String} accountID Account ID, 32 alpha numeric
     * @param {String} userID User ID, 32 alpha numeric
     * @param {module:api/CallRecordingApi~v1AccountAccountIDUserUserIDRecordingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsCallRecordingGetAll}
     */
    v1AccountAccountIDUserUserIDRecordingGet(accountID, userID, callback) {
      let postBody = null;
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling v1AccountAccountIDUserUserIDRecordingGet");
      }
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling v1AccountAccountIDUserUserIDRecordingGet");
      }

      let pathParams = {
        'accountID': accountID,
        'userID': userID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceDocsCallRecordingGetAll;
      return this.apiClient.callApi(
        '/v1/account/{accountID}/user/{userID}/recording', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
