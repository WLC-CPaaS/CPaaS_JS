/**
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CPAASError from '../model/CPAASError';
import ServiceDocsCdrGetAll from '../model/ServiceDocsCdrGetAll';
import ServiceDocsCdrGetSingle from '../model/ServiceDocsCdrGetSingle';

/**
* Cdr service.
* @module api/CdrApi
* @version 1.1
*/
export default class CdrApi {

    /**
    * Constructs a new CdrApi. 
    * @alias module:api/CdrApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1AccountAccountIDCdrCdrIDGet operation.
     * @callback module:api/CdrApi~v1AccountAccountIDCdrCdrIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsCdrGetSingle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the details of a single CDR record from an account.
     * @param {String} accountID Account ID, 32 alpha numeric
     * @param {String} cdrID CDR ID, string
     * @param {module:api/CdrApi~v1AccountAccountIDCdrCdrIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsCdrGetSingle}
     */
    v1AccountAccountIDCdrCdrIDGet(accountID, cdrID, callback) {
      let postBody = null;
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling v1AccountAccountIDCdrCdrIDGet");
      }
      // verify the required parameter 'cdrID' is set
      if (cdrID === undefined || cdrID === null) {
        throw new Error("Missing the required parameter 'cdrID' when calling v1AccountAccountIDCdrCdrIDGet");
      }

      let pathParams = {
        'accountID': accountID,
        'cdrID': cdrID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceDocsCdrGetSingle;
      return this.apiClient.callApi(
        '/v1/account/{accountID}/cdr/{cdrID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AccountAccountIDCdrGet operation.
     * @callback module:api/CdrApi~v1AccountAccountIDCdrGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsCdrGetAll} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of CDRs in a specific account.
     * @param {String} accountID Account ID, 32 alpha numeric
     * @param {String} pageSize Page size (Maximum number of results to display per page)
     * @param {String} startKey Start key (Starting offset for displaying results)
     * @param {String} createdFrom For displaying records which are created on or after this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds)
     * @param {String} createdTo For displaying records which are created on or before this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds)
     * @param {module:api/CdrApi~v1AccountAccountIDCdrGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsCdrGetAll}
     */
    v1AccountAccountIDCdrGet(accountID, pageSize, startKey, createdFrom, createdTo, callback) {
      let postBody = null;
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling v1AccountAccountIDCdrGet");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling v1AccountAccountIDCdrGet");
      }
      // verify the required parameter 'startKey' is set
      if (startKey === undefined || startKey === null) {
        throw new Error("Missing the required parameter 'startKey' when calling v1AccountAccountIDCdrGet");
      }
      // verify the required parameter 'createdFrom' is set
      if (createdFrom === undefined || createdFrom === null) {
        throw new Error("Missing the required parameter 'createdFrom' when calling v1AccountAccountIDCdrGet");
      }
      // verify the required parameter 'createdTo' is set
      if (createdTo === undefined || createdTo === null) {
        throw new Error("Missing the required parameter 'createdTo' when calling v1AccountAccountIDCdrGet");
      }

      let pathParams = {
        'accountID': accountID
      };
      let queryParams = {
        'page_size': pageSize,
        'start_key': startKey,
        'created_from': createdFrom,
        'created_to': createdTo
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceDocsCdrGetAll;
      return this.apiClient.callApi(
        '/v1/account/{accountID}/cdr', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
