/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package api;

import com.sun.jersey.api.client.GenericType;

import .ApiException;
import .ApiClient;
import .Configuration;
import model.*;
import .Pair;

import ServiceAPIResponse;
import ServiceChannelRunActionData;
import ServiceChannelRunMetaflowData;
import ServiceDocsChannelGet;
import ServiceDocsChannelGetSingle;
import UtilCPAASError;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@.annotation.Generated(value = "org.openapitools.codegen.languages.JavascriptClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class ChannelApi {
  private ApiClient apiClient;

  public ChannelApi() {
    this(Configuration.getDefaultApiClient());
  }

  public ChannelApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Get Channel Details
   * Access details about each channel in an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param channelID Channel ID (required)
   * @return ServiceDocsChannelGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsChannelGetSingle v1AccountAccountIDChannelChannelIDGet(String accountID, String channelID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDChannelChannelIDGet");
    }
    
    // verify the required parameter 'channelID' is set
    if (channelID == null) {
      throw new ApiException(400, "Missing the required parameter 'channelID' when calling v1AccountAccountIDChannelChannelIDGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/channel/{channelID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "channelID" + "\\}", apiClient.escapeString(channelID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsChannelGetSingle> localVarReturnType = new GenericType<ServiceDocsChannelGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Associate Action to Channel
   * Link an action, such as transfer or hangup to a channel.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param channelID Channel ID (required)
   * @param reqBody payload fields (required)
   * @return ServiceAPIResponse
   * @throws ApiException if fails to make API call
   */
  public ServiceAPIResponse v1AccountAccountIDChannelChannelIDPost(String accountID, String channelID, ServiceChannelRunActionData reqBody) throws ApiException {
    Object localVarPostBody = reqBody;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDChannelChannelIDPost");
    }
    
    // verify the required parameter 'channelID' is set
    if (channelID == null) {
      throw new ApiException(400, "Missing the required parameter 'channelID' when calling v1AccountAccountIDChannelChannelIDPost");
    }
    
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      throw new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDChannelChannelIDPost");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/channel/{channelID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "channelID" + "\\}", apiClient.escapeString(channelID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceAPIResponse> localVarReturnType = new GenericType<ServiceAPIResponse>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Associate Metaflow to Channel
   * Link a metaflow to an active channel.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param channelID Channel ID (required)
   * @param reqBody payload fields (required)
   * @return ServiceAPIResponse
   * @throws ApiException if fails to make API call
   */
  public ServiceAPIResponse v1AccountAccountIDChannelChannelIDPut(String accountID, String channelID, ServiceChannelRunMetaflowData reqBody) throws ApiException {
    Object localVarPostBody = reqBody;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDChannelChannelIDPut");
    }
    
    // verify the required parameter 'channelID' is set
    if (channelID == null) {
      throw new ApiException(400, "Missing the required parameter 'channelID' when calling v1AccountAccountIDChannelChannelIDPut");
    }
    
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      throw new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDChannelChannelIDPut");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/channel/{channelID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "channelID" + "\\}", apiClient.escapeString(channelID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceAPIResponse> localVarReturnType = new GenericType<ServiceAPIResponse>() {};
    return apiClient.invokeAPI(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get Account Channel List
   * Get a list of active channels for an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @return ServiceDocsChannelGet
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsChannelGet v1AccountAccountIDChannelGet(String accountID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDChannelGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/channel"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsChannelGet> localVarReturnType = new GenericType<ServiceDocsChannelGet>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get Device Channel List
   * Get the list of active channels for a device.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param deviceID Device ID, 32 alpha numeric (required)
   * @return ServiceDocsChannelGet
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsChannelGet v1AccountAccountIDDeviceDeviceIDChannelGet(String accountID, String deviceID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDDeviceDeviceIDChannelGet");
    }
    
    // verify the required parameter 'deviceID' is set
    if (deviceID == null) {
      throw new ApiException(400, "Missing the required parameter 'deviceID' when calling v1AccountAccountIDDeviceDeviceIDChannelGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/device/{deviceID}/channel"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "deviceID" + "\\}", apiClient.escapeString(deviceID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsChannelGet> localVarReturnType = new GenericType<ServiceDocsChannelGet>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get User Channel List
   * Get the list of active channels for a user.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param userID User ID, 32 alpha numeric (required)
   * @return ServiceDocsChannelGet
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsChannelGet v1AccountAccountIDUserUserIDChannelGet(String accountID, String userID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDUserUserIDChannelGet");
    }
    
    // verify the required parameter 'userID' is set
    if (userID == null) {
      throw new ApiException(400, "Missing the required parameter 'userID' when calling v1AccountAccountIDUserUserIDChannelGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/user/{userID}/channel"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "userID" + "\\}", apiClient.escapeString(userID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsChannelGet> localVarReturnType = new GenericType<ServiceDocsChannelGet>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
