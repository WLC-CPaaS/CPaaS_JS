/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package api;

import com.sun.jersey.api.client.GenericType;

import .ApiException;
import .ApiClient;
import .Configuration;
import model.*;
import .Pair;

import ServiceDocGroupGetAll;
import ServiceDocGroupGetSingle;
import ServiceVOIPGroupAddEdit2;
import UtilCPAASError;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@.annotation.Generated(value = "org.openapitools.codegen.languages.JavascriptClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class GroupApi {
  private ApiClient apiClient;

  public GroupApi() {
    this(Configuration.getDefaultApiClient());
  }

  public GroupApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Get Group List
   * Get a list of groups associated with an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
   * @param pageSize number of records to return, range 1 to 50 (optional)
   * @return ServiceDocGroupGetAll
   * @throws ApiException if fails to make API call
   */
  public ServiceDocGroupGetAll v1AccountAccountIDGroupGet(String accountID, String startKey, Number pageSize) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDGroupGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/group"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("start_key", startKey));
    localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocGroupGetAll> localVarReturnType = new GenericType<ServiceDocGroupGetAll>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Delete Group
   * Delete a call group in an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param groupID group ID, 32 alpha numeric (required)
   * @return ServiceDocGroupGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocGroupGetSingle v1AccountAccountIDGroupGroupIDDelete(String accountID, String groupID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDGroupGroupIDDelete");
    }
    
    // verify the required parameter 'groupID' is set
    if (groupID == null) {
      throw new ApiException(400, "Missing the required parameter 'groupID' when calling v1AccountAccountIDGroupGroupIDDelete");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/group/{groupID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "groupID" + "\\}", apiClient.escapeString(groupID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocGroupGetSingle> localVarReturnType = new GenericType<ServiceDocGroupGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get Group Details
   * Access details about a single group within an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param groupID Group ID, 32 alpha numeric (required)
   * @return ServiceDocGroupGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocGroupGetSingle v1AccountAccountIDGroupGroupIDGet(String accountID, String groupID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDGroupGroupIDGet");
    }
    
    // verify the required parameter 'groupID' is set
    if (groupID == null) {
      throw new ApiException(400, "Missing the required parameter 'groupID' when calling v1AccountAccountIDGroupGroupIDGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/group/{groupID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "groupID" + "\\}", apiClient.escapeString(groupID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocGroupGetSingle> localVarReturnType = new GenericType<ServiceDocGroupGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Update Group
   * Modify the name, settings and other information for a group within an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param groupID Group ID, 32 alpha numeric (required)
   * @param reqBody payload fields (required)
   * @return ServiceDocGroupGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocGroupGetSingle v1AccountAccountIDGroupGroupIDPut(String accountID, String groupID, ServiceVOIPGroupAddEdit2 reqBody) throws ApiException {
    Object localVarPostBody = reqBody;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDGroupGroupIDPut");
    }
    
    // verify the required parameter 'groupID' is set
    if (groupID == null) {
      throw new ApiException(400, "Missing the required parameter 'groupID' when calling v1AccountAccountIDGroupGroupIDPut");
    }
    
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      throw new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDGroupGroupIDPut");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/group/{groupID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "groupID" + "\\}", apiClient.escapeString(groupID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocGroupGetSingle> localVarReturnType = new GenericType<ServiceDocGroupGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Create Group
   * Provide an additional resource by adding a group list to an account.
   * @param accountID Account ID (required)
   * @param group group fields (required)
   * @return ServiceDocGroupGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocGroupGetSingle v1AccountAccountIDGroupPost(String accountID, ServiceVOIPGroupAddEdit2 group) throws ApiException {
    Object localVarPostBody = group;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDGroupPost");
    }
    
    // verify the required parameter 'group' is set
    if (group == null) {
      throw new ApiException(400, "Missing the required parameter 'group' when calling v1AccountAccountIDGroupPost");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/group"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocGroupGetSingle> localVarReturnType = new GenericType<ServiceDocGroupGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
