/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package api;

import com.sun.jersey.api.client.GenericType;

import .ApiException;
import .ApiClient;
import .Configuration;
import model.*;
import .Pair;

import ServiceDocsMediaGetAll;
import ServiceDocsMediaGetSingle;
import ServiceVOIPMediaAddEditData;
import UtilCPAASError;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@.annotation.Generated(value = "org.openapitools.codegen.languages.JavascriptClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class MediaApi {
  private ApiClient apiClient;

  public MediaApi() {
    this(Configuration.getDefaultApiClient());
  }

  public MediaApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Get Media File
   * Gather data about the media objects in an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param mediaID Media ID, 32 alpha numeric (required)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File v1AccountAccountIDMediaMediaIDFileGet(String accountID, String mediaID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDMediaMediaIDFileGet");
    }
    
    // verify the required parameter 'mediaID' is set
    if (mediaID == null) {
      throw new ApiException(400, "Missing the required parameter 'mediaID' when calling v1AccountAccountIDMediaMediaIDFileGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/media/{mediaID}/file"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "mediaID" + "\\}", apiClient.escapeString(mediaID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json", "audio/mp3", "audio/mpeg", "audio/mpeg3", "audio/x-wav", "audio/wav", "audio/ogg", "video/x-flv", "video/h264", "video/mpeg", "video/quicktime", "video/mp4", "video/webm"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<File> localVarReturnType = new GenericType<File>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Add Media File
   * Include a media file that is connected to a media object in an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param mediaID Media ID, 32 alpha numeric (required)
   * @param file Media file (required)
   * @return ServiceDocsMediaGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsMediaGetSingle v1AccountAccountIDMediaMediaIDFilePost(String accountID, String mediaID, File file) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDMediaMediaIDFilePost");
    }
    
    // verify the required parameter 'mediaID' is set
    if (mediaID == null) {
      throw new ApiException(400, "Missing the required parameter 'mediaID' when calling v1AccountAccountIDMediaMediaIDFilePost");
    }
    
    // verify the required parameter 'file' is set
    if (file == null) {
      throw new ApiException(400, "Missing the required parameter 'file' when calling v1AccountAccountIDMediaMediaIDFilePost");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/media/{mediaID}/file"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "mediaID" + "\\}", apiClient.escapeString(mediaID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    if (file != null)
      localVarFormParams.put("file", file);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "multipart/form-data"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsMediaGetSingle> localVarReturnType = new GenericType<ServiceDocsMediaGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get Media List
   * View all media files for an account in your organization.
   * @param accountid Account ID, 32 alpha numeric (required)
   * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
   * @param pageSize number of records to return, range 1 to 50 (optional)
   * @return ServiceDocsMediaGetAll
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsMediaGetAll v1AccountAccountidMediaGet(String accountid, String startKey, Number pageSize) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      throw new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidMediaGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountid}/media"
      .replaceAll("\\{" + "accountid" + "\\}", apiClient.escapeString(accountid.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("start_key", startKey));
    localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsMediaGetAll> localVarReturnType = new GenericType<ServiceDocsMediaGetAll>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Delete Media
   * Remove a media file that is no longer in use from an account.
   * @param accountid Account ID, 32 alpha numeric (required)
   * @param mediaid Device ID, 32 alpha numeric (required)
   * @return ServiceDocsMediaGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsMediaGetSingle v1AccountAccountidMediaMediaidDelete(String accountid, String mediaid) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      throw new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidMediaMediaidDelete");
    }
    
    // verify the required parameter 'mediaid' is set
    if (mediaid == null) {
      throw new ApiException(400, "Missing the required parameter 'mediaid' when calling v1AccountAccountidMediaMediaidDelete");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountid}/media/{mediaid}"
      .replaceAll("\\{" + "accountid" + "\\}", apiClient.escapeString(accountid.toString()))
      .replaceAll("\\{" + "mediaid" + "\\}", apiClient.escapeString(mediaid.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsMediaGetSingle> localVarReturnType = new GenericType<ServiceDocsMediaGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get Media Details
   * Permit users to view an account&#39;s specific media information.
   * @param accountid Account ID, 32 alpha numeric (required)
   * @param mediaid Media ID, 32 alpha numeric (required)
   * @return ServiceDocsMediaGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsMediaGetSingle v1AccountAccountidMediaMediaidGet(String accountid, String mediaid) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      throw new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidMediaMediaidGet");
    }
    
    // verify the required parameter 'mediaid' is set
    if (mediaid == null) {
      throw new ApiException(400, "Missing the required parameter 'mediaid' when calling v1AccountAccountidMediaMediaidGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountid}/media/{mediaid}"
      .replaceAll("\\{" + "accountid" + "\\}", apiClient.escapeString(accountid.toString()))
      .replaceAll("\\{" + "mediaid" + "\\}", apiClient.escapeString(mediaid.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsMediaGetSingle> localVarReturnType = new GenericType<ServiceDocsMediaGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Create Media
   * Generate a media object to allow users to upload a media file in an account.
   * @param accountid Account ID, 32 alpha numeric (required)
   * @param media Media creation or update payload (required)
   * @return ServiceDocsMediaGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsMediaGetSingle v1AccountAccountidMediaPost(String accountid, ServiceVOIPMediaAddEditData media) throws ApiException {
    Object localVarPostBody = media;
    
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      throw new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidMediaPost");
    }
    
    // verify the required parameter 'media' is set
    if (media == null) {
      throw new ApiException(400, "Missing the required parameter 'media' when calling v1AccountAccountidMediaPost");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountid}/media"
      .replaceAll("\\{" + "accountid" + "\\}", apiClient.escapeString(accountid.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsMediaGetSingle> localVarReturnType = new GenericType<ServiceDocsMediaGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
