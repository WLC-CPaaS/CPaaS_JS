/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package api;

import com.sun.jersey.api.client.GenericType;

import .ApiException;
import .ApiClient;
import .Configuration;
import model.*;
import .Pair;

import ServiceDocsMenuGetAll;
import ServiceDocsMenuGetSingle;
import ServiceVOIPMenuAddEditData;
import UtilCPAASError;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@.annotation.Generated(value = "org.openapitools.codegen.languages.JavascriptClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class MenuApi {
  private ApiClient apiClient;

  public MenuApi() {
    this(Configuration.getDefaultApiClient());
  }

  public MenuApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Get Menu List
   * Users can access data about all menus in an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
   * @param pageSize number of records to return, range 1 to 50 (optional)
   * @return ServiceDocsMenuGetAll
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsMenuGetAll v1AccountAccountIDMenuGet(String accountID, String startKey, Number pageSize) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDMenuGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/menu"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("start_key", startKey));
    localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsMenuGetAll> localVarReturnType = new GenericType<ServiceDocsMenuGetAll>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Delete Menu
   * Delete a menu from an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param menuID Menu ID, 32 alpha numeric (required)
   * @return ServiceDocsMenuGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsMenuGetSingle v1AccountAccountIDMenuMenuIDDelete(String accountID, String menuID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDMenuMenuIDDelete");
    }
    
    // verify the required parameter 'menuID' is set
    if (menuID == null) {
      throw new ApiException(400, "Missing the required parameter 'menuID' when calling v1AccountAccountIDMenuMenuIDDelete");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/menu/{menuID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "menuID" + "\\}", apiClient.escapeString(menuID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsMenuGetSingle> localVarReturnType = new GenericType<ServiceDocsMenuGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get Menu Details
   * Get details about a menu in an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param menuID Menu ID, 32 alpha numeric (required)
   * @return ServiceDocsMenuGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsMenuGetSingle v1AccountAccountIDMenuMenuIDGet(String accountID, String menuID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDMenuMenuIDGet");
    }
    
    // verify the required parameter 'menuID' is set
    if (menuID == null) {
      throw new ApiException(400, "Missing the required parameter 'menuID' when calling v1AccountAccountIDMenuMenuIDGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/menu/{menuID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "menuID" + "\\}", apiClient.escapeString(menuID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsMenuGetSingle> localVarReturnType = new GenericType<ServiceDocsMenuGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Update Menu
   * Edit an account menu.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param menuID Menu ID, 32 alpha numeric (required)
   * @param reqBody payload fields (required)
   * @return ServiceDocsMenuGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsMenuGetSingle v1AccountAccountIDMenuMenuIDPut(String accountID, String menuID, ServiceVOIPMenuAddEditData reqBody) throws ApiException {
    Object localVarPostBody = reqBody;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDMenuMenuIDPut");
    }
    
    // verify the required parameter 'menuID' is set
    if (menuID == null) {
      throw new ApiException(400, "Missing the required parameter 'menuID' when calling v1AccountAccountIDMenuMenuIDPut");
    }
    
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      throw new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDMenuMenuIDPut");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/menu/{menuID}"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "menuID" + "\\}", apiClient.escapeString(menuID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsMenuGetSingle> localVarReturnType = new GenericType<ServiceDocsMenuGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Create Menu
   * Create a new menu for an account.
   * @param accountID Account ID, 32 alphanumeric (required)
   * @param menu Menu data (required)
   * @return ServiceDocsMenuGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsMenuGetSingle v1AccountAccountIDMenuPost(String accountID, ServiceVOIPMenuAddEditData menu) throws ApiException {
    Object localVarPostBody = menu;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDMenuPost");
    }
    
    // verify the required parameter 'menu' is set
    if (menu == null) {
      throw new ApiException(400, "Missing the required parameter 'menu' when calling v1AccountAccountIDMenuPost");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/menu"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsMenuGetSingle> localVarReturnType = new GenericType<ServiceDocsMenuGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
