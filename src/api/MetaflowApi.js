/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package api;

import com.sun.jersey.api.client.GenericType;

import .ApiException;
import .ApiClient;
import .Configuration;
import model.*;
import .Pair;

import ServiceDocMetaflowGet;
import ServiceVOIPMetaflowAddData;
import UtilCPAASError;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@.annotation.Generated(value = "org.openapitools.codegen.languages.JavascriptClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class MetaflowApi {
  private ApiClient apiClient;

  public MetaflowApi() {
    this(Configuration.getDefaultApiClient());
  }

  public MetaflowApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Delete Device Metaflow
   * Delete all metaflows associated with a device.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param deviceID Device ID, 32 alpha numeric (required)
   * @return ServiceDocMetaflowGet
   * @throws ApiException if fails to make API call
   */
  public ServiceDocMetaflowGet v1AccountAccountIDDeviceDeviceIDMetaflowDelete(String accountID, String deviceID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDDeviceDeviceIDMetaflowDelete");
    }
    
    // verify the required parameter 'deviceID' is set
    if (deviceID == null) {
      throw new ApiException(400, "Missing the required parameter 'deviceID' when calling v1AccountAccountIDDeviceDeviceIDMetaflowDelete");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/device/{deviceID}/metaflow"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "deviceID" + "\\}", apiClient.escapeString(deviceID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocMetaflowGet> localVarReturnType = new GenericType<ServiceDocMetaflowGet>() {};
    return apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get Device Metaflow List
   * Get the list of metaflows for a device.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param deviceID Device ID, 32 alpha numeric (required)
   * @return ServiceDocMetaflowGet
   * @throws ApiException if fails to make API call
   */
  public ServiceDocMetaflowGet v1AccountAccountIDDeviceDeviceIDMetaflowGet(String accountID, String deviceID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDDeviceDeviceIDMetaflowGet");
    }
    
    // verify the required parameter 'deviceID' is set
    if (deviceID == null) {
      throw new ApiException(400, "Missing the required parameter 'deviceID' when calling v1AccountAccountIDDeviceDeviceIDMetaflowGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/device/{deviceID}/metaflow"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "deviceID" + "\\}", apiClient.escapeString(deviceID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocMetaflowGet> localVarReturnType = new GenericType<ServiceDocMetaflowGet>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Create Device Metaflow
   * Create a metaflow or multiple metaflows for a device.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param deviceID Device ID, 32 alpha numeric (required)
   * @param reqBody payload fields (required)
   * @return ServiceDocMetaflowGet
   * @throws ApiException if fails to make API call
   */
  public ServiceDocMetaflowGet v1AccountAccountIDDeviceDeviceIDMetaflowPost(String accountID, String deviceID, ServiceVOIPMetaflowAddData reqBody) throws ApiException {
    Object localVarPostBody = reqBody;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDDeviceDeviceIDMetaflowPost");
    }
    
    // verify the required parameter 'deviceID' is set
    if (deviceID == null) {
      throw new ApiException(400, "Missing the required parameter 'deviceID' when calling v1AccountAccountIDDeviceDeviceIDMetaflowPost");
    }
    
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      throw new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDDeviceDeviceIDMetaflowPost");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/device/{deviceID}/metaflow"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "deviceID" + "\\}", apiClient.escapeString(deviceID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocMetaflowGet> localVarReturnType = new GenericType<ServiceDocMetaflowGet>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Delete Account Metaflow
   * Remove all metaflows from an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @return ServiceDocMetaflowGet
   * @throws ApiException if fails to make API call
   */
  public ServiceDocMetaflowGet v1AccountAccountIDMetaflowDelete(String accountID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDMetaflowDelete");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/metaflow"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocMetaflowGet> localVarReturnType = new GenericType<ServiceDocMetaflowGet>() {};
    return apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get Account Metaflow List
   * Get an account&#39;s metaflow list.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @return ServiceDocMetaflowGet
   * @throws ApiException if fails to make API call
   */
  public ServiceDocMetaflowGet v1AccountAccountIDMetaflowGet(String accountID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDMetaflowGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/metaflow"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocMetaflowGet> localVarReturnType = new GenericType<ServiceDocMetaflowGet>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Create Account Metaflow
   * Generate a metaflow for an account.
   * @param accountID Account ID (required)
   * @param metaflow Metaflow fields (required)
   * @return ServiceDocMetaflowGet
   * @throws ApiException if fails to make API call
   */
  public ServiceDocMetaflowGet v1AccountAccountIDMetaflowPost(String accountID, ServiceVOIPMetaflowAddData metaflow) throws ApiException {
    Object localVarPostBody = metaflow;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDMetaflowPost");
    }
    
    // verify the required parameter 'metaflow' is set
    if (metaflow == null) {
      throw new ApiException(400, "Missing the required parameter 'metaflow' when calling v1AccountAccountIDMetaflowPost");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/metaflow"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocMetaflowGet> localVarReturnType = new GenericType<ServiceDocMetaflowGet>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Delete User Metaflow
   * Delete all metaflows associated with a user.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param userID user ID, 32 alpha numeric (required)
   * @return ServiceDocMetaflowGet
   * @throws ApiException if fails to make API call
   */
  public ServiceDocMetaflowGet v1AccountAccountIDUserUserIDMetaflowDelete(String accountID, String userID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDUserUserIDMetaflowDelete");
    }
    
    // verify the required parameter 'userID' is set
    if (userID == null) {
      throw new ApiException(400, "Missing the required parameter 'userID' when calling v1AccountAccountIDUserUserIDMetaflowDelete");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/user/{userID}/metaflow"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "userID" + "\\}", apiClient.escapeString(userID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocMetaflowGet> localVarReturnType = new GenericType<ServiceDocMetaflowGet>() {};
    return apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get User Metaflow List
   * Get the list of metaflows for a user.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param userID user ID, 32 alpha numeric (required)
   * @return ServiceDocMetaflowGet
   * @throws ApiException if fails to make API call
   */
  public ServiceDocMetaflowGet v1AccountAccountIDUserUserIDMetaflowGet(String accountID, String userID) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDUserUserIDMetaflowGet");
    }
    
    // verify the required parameter 'userID' is set
    if (userID == null) {
      throw new ApiException(400, "Missing the required parameter 'userID' when calling v1AccountAccountIDUserUserIDMetaflowGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/user/{userID}/metaflow"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "userID" + "\\}", apiClient.escapeString(userID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocMetaflowGet> localVarReturnType = new GenericType<ServiceDocMetaflowGet>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Create User Metaflow
   * Add a metaflow or multiple metaflows for a user in an account.
   * @param accountID Account ID, 32 alpha numeric (required)
   * @param userID user ID, 32 alpha numeric (required)
   * @param reqBody payload fields (required)
   * @return ServiceDocMetaflowGet
   * @throws ApiException if fails to make API call
   */
  public ServiceDocMetaflowGet v1AccountAccountIDUserUserIDMetaflowPost(String accountID, String userID, ServiceVOIPMetaflowAddData reqBody) throws ApiException {
    Object localVarPostBody = reqBody;
    
    // verify the required parameter 'accountID' is set
    if (accountID == null) {
      throw new ApiException(400, "Missing the required parameter 'accountID' when calling v1AccountAccountIDUserUserIDMetaflowPost");
    }
    
    // verify the required parameter 'userID' is set
    if (userID == null) {
      throw new ApiException(400, "Missing the required parameter 'userID' when calling v1AccountAccountIDUserUserIDMetaflowPost");
    }
    
    // verify the required parameter 'reqBody' is set
    if (reqBody == null) {
      throw new ApiException(400, "Missing the required parameter 'reqBody' when calling v1AccountAccountIDUserUserIDMetaflowPost");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountID}/user/{userID}/metaflow"
      .replaceAll("\\{" + "accountID" + "\\}", apiClient.escapeString(accountID.toString()))
      .replaceAll("\\{" + "userID" + "\\}", apiClient.escapeString(userID.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocMetaflowGet> localVarReturnType = new GenericType<ServiceDocMetaflowGet>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
