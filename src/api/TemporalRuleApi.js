/**
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CPAASError from '../model/CPAASError';
import ServiceDocsTemporalRuleGetAll from '../model/ServiceDocsTemporalRuleGetAll';
import ServiceDocsTemporalRuleGetSingle from '../model/ServiceDocsTemporalRuleGetSingle';
import ServiceVOIPTemporalRuleAddEdit2 from '../model/ServiceVOIPTemporalRuleAddEdit2';

/**
* TemporalRule service.
* @module api/TemporalRuleApi
* @version 1.1
*/
export default class TemporalRuleApi {

    /**
    * Constructs a new TemporalRuleApi. 
    * @alias module:api/TemporalRuleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1AccountAccountIDTemporalruleGet operation.
     * @callback module:api/TemporalRuleApi~v1AccountAccountIDTemporalruleGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsTemporalRuleGetAll} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Temporal Rule List
     * Access all temporal rules for an account.
     * @param {String} accountID Account ID, 32 alpha numeric
     * @param {Object} opts Optional parameters
     * @param {String} [startKey] start_key for pagination that was returned as next_start_key from your previous call
     * @param {Number} [pageSize] number of records to return, range 1 to 50
     * @param {module:api/TemporalRuleApi~v1AccountAccountIDTemporalruleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsTemporalRuleGetAll}
     */
    v1AccountAccountIDTemporalruleGet(accountID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalruleGet");
      }

      let pathParams = {
        'accountID': accountID
      };
      let queryParams = {
        'start_key': opts['startKey'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceDocsTemporalRuleGetAll;
      return this.apiClient.callApi(
        '/v1/account/{accountID}/temporalrule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AccountAccountIDTemporalrulePost operation.
     * @callback module:api/TemporalRuleApi~v1AccountAccountIDTemporalrulePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsTemporalRuleGetSingle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Temporal Rule
     * Create temporal rules for an account.
     * @param {String} accountID Account ID, 32 alphanumeric
     * @param {module:model/ServiceVOIPTemporalRuleAddEdit2} temporalrule payload fields
     * @param {module:api/TemporalRuleApi~v1AccountAccountIDTemporalrulePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsTemporalRuleGetSingle}
     */
    v1AccountAccountIDTemporalrulePost(accountID, temporalrule, callback) {
      let postBody = temporalrule;
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalrulePost");
      }
      // verify the required parameter 'temporalrule' is set
      if (temporalrule === undefined || temporalrule === null) {
        throw new Error("Missing the required parameter 'temporalrule' when calling v1AccountAccountIDTemporalrulePost");
      }

      let pathParams = {
        'accountID': accountID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServiceDocsTemporalRuleGetSingle;
      return this.apiClient.callApi(
        '/v1/account/{accountID}/temporalrule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AccountAccountIDTemporalruleTemporalRuleIDDelete operation.
     * @callback module:api/TemporalRuleApi~v1AccountAccountIDTemporalruleTemporalRuleIDDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsTemporalRuleGetSingle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Temporal Rule
     * Remove a temporal rule from an account.
     * @param {String} accountID Account ID, 32 alpha numeric
     * @param {String} temporalRuleID temporal rule ID, 32 alpha numeric
     * @param {module:api/TemporalRuleApi~v1AccountAccountIDTemporalruleTemporalRuleIDDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsTemporalRuleGetSingle}
     */
    v1AccountAccountIDTemporalruleTemporalRuleIDDelete(accountID, temporalRuleID, callback) {
      let postBody = null;
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDDelete");
      }
      // verify the required parameter 'temporalRuleID' is set
      if (temporalRuleID === undefined || temporalRuleID === null) {
        throw new Error("Missing the required parameter 'temporalRuleID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDDelete");
      }

      let pathParams = {
        'accountID': accountID,
        'temporalRuleID': temporalRuleID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceDocsTemporalRuleGetSingle;
      return this.apiClient.callApi(
        '/v1/account/{accountID}/temporalrule/{temporalRuleID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AccountAccountIDTemporalruleTemporalRuleIDGet operation.
     * @callback module:api/TemporalRuleApi~v1AccountAccountIDTemporalruleTemporalRuleIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsTemporalRuleGetSingle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Temporal Rule Details
     * View details about individual time rules.
     * @param {String} accountID Account ID, 32 alpha numeric
     * @param {String} temporalRuleID Temporal Rule ID, 32 alpha numeric
     * @param {module:api/TemporalRuleApi~v1AccountAccountIDTemporalruleTemporalRuleIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsTemporalRuleGetSingle}
     */
    v1AccountAccountIDTemporalruleTemporalRuleIDGet(accountID, temporalRuleID, callback) {
      let postBody = null;
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDGet");
      }
      // verify the required parameter 'temporalRuleID' is set
      if (temporalRuleID === undefined || temporalRuleID === null) {
        throw new Error("Missing the required parameter 'temporalRuleID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDGet");
      }

      let pathParams = {
        'accountID': accountID,
        'temporalRuleID': temporalRuleID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceDocsTemporalRuleGetSingle;
      return this.apiClient.callApi(
        '/v1/account/{accountID}/temporalrule/{temporalRuleID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AccountAccountIDTemporalruleTemporalRuleIDPut operation.
     * @callback module:api/TemporalRuleApi~v1AccountAccountIDTemporalruleTemporalRuleIDPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsTemporalRuleGetSingle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Temporal Rule
     * Edit the existing temporal rules in an account.
     * @param {String} accountID Account ID, 32 alpha numeric
     * @param {String} temporalRuleID Temporal Rule ID, 32 alpha numeric
     * @param {module:model/ServiceVOIPTemporalRuleAddEdit2} reqBody payload fields
     * @param {module:api/TemporalRuleApi~v1AccountAccountIDTemporalruleTemporalRuleIDPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsTemporalRuleGetSingle}
     */
    v1AccountAccountIDTemporalruleTemporalRuleIDPut(accountID, temporalRuleID, reqBody, callback) {
      let postBody = reqBody;
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDPut");
      }
      // verify the required parameter 'temporalRuleID' is set
      if (temporalRuleID === undefined || temporalRuleID === null) {
        throw new Error("Missing the required parameter 'temporalRuleID' when calling v1AccountAccountIDTemporalruleTemporalRuleIDPut");
      }
      // verify the required parameter 'reqBody' is set
      if (reqBody === undefined || reqBody === null) {
        throw new Error("Missing the required parameter 'reqBody' when calling v1AccountAccountIDTemporalruleTemporalRuleIDPut");
      }

      let pathParams = {
        'accountID': accountID,
        'temporalRuleID': temporalRuleID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServiceDocsTemporalRuleGetSingle;
      return this.apiClient.callApi(
        '/v1/account/{accountID}/temporalrule/{temporalRuleID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
