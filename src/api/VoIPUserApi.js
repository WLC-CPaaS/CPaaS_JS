/**
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CPAASError from '../model/CPAASError';
import ServiceDocsImpersonateUserGetSingle from '../model/ServiceDocsImpersonateUserGetSingle';
import ServiceDocsUserGetAll from '../model/ServiceDocsUserGetAll';
import ServiceDocsUserGetSingle from '../model/ServiceDocsUserGetSingle';
import ServiceVOIPImpersonateUser from '../model/ServiceVOIPImpersonateUser';
import ServiceVOIPUserAdd2 from '../model/ServiceVOIPUserAdd2';

/**
* VoIPUser service.
* @module api/VoIPUserApi
* @version 1.1
*/
export default class VoIPUserApi {

    /**
    * Constructs a new VoIPUserApi. 
    * @alias module:api/VoIPUserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1AccountAccountidUserGet operation.
     * @callback module:api/VoIPUserApi~v1AccountAccountidUserGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsUserGetAll} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User List
     * Get a list of all VoIP users that includes first and last names, email addresses, extensions, and account statuses.
     * @param {String} accountid Account ID, 32 alpha numeric
     * @param {Object} opts Optional parameters
     * @param {String} [startKey] start_key for pagination that was returned as next_start_key from your previous call
     * @param {Number} [pageSize] number of records to return, range 1 to 50
     * @param {module:api/VoIPUserApi~v1AccountAccountidUserGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsUserGetAll}
     */
    v1AccountAccountidUserGet(accountid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling v1AccountAccountidUserGet");
      }

      let pathParams = {
        'accountid': accountid
      };
      let queryParams = {
        'start_key': opts['startKey'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceDocsUserGetAll;
      return this.apiClient.callApi(
        '/v1/account/{accountid}/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AccountAccountidUserPost operation.
     * @callback module:api/VoIPUserApi~v1AccountAccountidUserPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsUserGetSingle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create User
     * Add new users to the account. When a user is added, the system generates their unique 32 alpha numeric ID.
     * @param {String} accountid Account ID, 32 alpha numeric
     * @param {module:model/ServiceVOIPUserAdd2} user user fields
     * @param {module:api/VoIPUserApi~v1AccountAccountidUserPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsUserGetSingle}
     */
    v1AccountAccountidUserPost(accountid, user, callback) {
      let postBody = user;
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling v1AccountAccountidUserPost");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling v1AccountAccountidUserPost");
      }

      let pathParams = {
        'accountid': accountid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServiceDocsUserGetSingle;
      return this.apiClient.callApi(
        '/v1/account/{accountid}/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AccountAccountidUserUseridDelete operation.
     * @callback module:api/VoIPUserApi~v1AccountAccountidUserUseridDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsUserGetSingle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete User
     * Delete VoIP user access to maintain the security of your accounts.
     * @param {String} accountid Account ID, 32 alpha numeric
     * @param {String} userid User ID, 32 alpha numeric
     * @param {module:api/VoIPUserApi~v1AccountAccountidUserUseridDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsUserGetSingle}
     */
    v1AccountAccountidUserUseridDelete(accountid, userid, callback) {
      let postBody = null;
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridDelete");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridDelete");
      }

      let pathParams = {
        'accountid': accountid,
        'userid': userid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceDocsUserGetSingle;
      return this.apiClient.callApi(
        '/v1/account/{accountid}/user/{userid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AccountAccountidUserUseridGet operation.
     * @callback module:api/VoIPUserApi~v1AccountAccountidUserUseridGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsUserGetSingle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User Details
     * View specific user details.
     * @param {String} accountid Account ID, 32 alpha numeric
     * @param {String} userid User ID, 32 alpha numeric
     * @param {module:api/VoIPUserApi~v1AccountAccountidUserUseridGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsUserGetSingle}
     */
    v1AccountAccountidUserUseridGet(accountid, userid, callback) {
      let postBody = null;
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridGet");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridGet");
      }

      let pathParams = {
        'accountid': accountid,
        'userid': userid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceDocsUserGetSingle;
      return this.apiClient.callApi(
        '/v1/account/{accountid}/user/{userid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AccountAccountidUserUseridPut operation.
     * @callback module:api/VoIPUserApi~v1AccountAccountidUserUseridPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsUserGetSingle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update User
     * Keep user information current. Modify the first and last name, extension, and other pertinent information.
     * @param {String} accountid Account ID, 32 alpha numeric
     * @param {String} userid User ID, 32 alpha numeric
     * @param {module:model/ServiceVOIPUserAdd2} user user fields
     * @param {module:api/VoIPUserApi~v1AccountAccountidUserUseridPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsUserGetSingle}
     */
    v1AccountAccountidUserUseridPut(accountid, userid, user, callback) {
      let postBody = user;
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridPut");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridPut");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling v1AccountAccountidUserUseridPut");
      }

      let pathParams = {
        'accountid': accountid,
        'userid': userid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServiceDocsUserGetSingle;
      return this.apiClient.callApi(
        '/v1/account/{accountid}/user/{userid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AccountAccountidUserUseridUserauthPost operation.
     * @callback module:api/VoIPUserApi~v1AccountAccountidUserUseridUserauthPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsImpersonateUserGetSingle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Impersonate a User
     * Retrieve a token for making presence calls.
     * @param {String} accountid Account ID, 32 alpha numeric
     * @param {String} userid User ID, 32 alpha numeric
     * @param {module:model/ServiceVOIPImpersonateUser} user Payload for impersonate a user
     * @param {module:api/VoIPUserApi~v1AccountAccountidUserUseridUserauthPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsImpersonateUserGetSingle}
     */
    v1AccountAccountidUserUseridUserauthPost(accountid, userid, user, callback) {
      let postBody = user;
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridUserauthPost");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridUserauthPost");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling v1AccountAccountidUserUseridUserauthPost");
      }

      let pathParams = {
        'accountid': accountid,
        'userid': userid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServiceDocsImpersonateUserGetSingle;
      return this.apiClient.callApi(
        '/v1/account/{accountid}/user/{userid}/userauth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
