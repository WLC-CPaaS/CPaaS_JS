/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package api;

import com.sun.jersey.api.client.GenericType;

import .ApiException;
import .ApiClient;
import .Configuration;
import model.*;
import .Pair;

import ServiceDocsUserGetAll;
import ServiceDocsUserGetSingle;
import ServiceVOIPUserAdd2;
import UtilCPAASError;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@.annotation.Generated(value = "org.openapitools.codegen.languages.JavascriptClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class VoIPUserApi {
  private ApiClient apiClient;

  public VoIPUserApi() {
    this(Configuration.getDefaultApiClient());
  }

  public VoIPUserApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Get User List
   * Get a list of all VoIP users that includes first and last names, email addresses, extensions, and account statuses.
   * @param accountid Account ID, 32 alpha numeric (required)
   * @param startKey start_key for pagination that was returned as next_start_key from your previous call (optional)
   * @param pageSize number of records to return, range 1 to 50 (optional)
   * @return ServiceDocsUserGetAll
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsUserGetAll v1AccountAccountidUserGet(String accountid, String startKey, Number pageSize) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      throw new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidUserGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountid}/user"
      .replaceAll("\\{" + "accountid" + "\\}", apiClient.escapeString(accountid.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("start_key", startKey));
    localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsUserGetAll> localVarReturnType = new GenericType<ServiceDocsUserGetAll>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Create User
   * Add new users to the account. When a user is added, the system generates their unique 32 alpha numeric ID.
   * @param accountid Account ID, 32 alpha numeric (required)
   * @param user user fields (required)
   * @return ServiceDocsUserGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsUserGetSingle v1AccountAccountidUserPost(String accountid, ServiceVOIPUserAdd2 user) throws ApiException {
    Object localVarPostBody = user;
    
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      throw new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidUserPost");
    }
    
    // verify the required parameter 'user' is set
    if (user == null) {
      throw new ApiException(400, "Missing the required parameter 'user' when calling v1AccountAccountidUserPost");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountid}/user"
      .replaceAll("\\{" + "accountid" + "\\}", apiClient.escapeString(accountid.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsUserGetSingle> localVarReturnType = new GenericType<ServiceDocsUserGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Delete User
   * Delete VoIP user access to maintain the security of your accounts.
   * @param accountid Account ID, 32 alpha numeric (required)
   * @param userid User ID, 32 alpha numeric (required)
   * @return ServiceDocsUserGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsUserGetSingle v1AccountAccountidUserUseridDelete(String accountid, String userid) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      throw new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridDelete");
    }
    
    // verify the required parameter 'userid' is set
    if (userid == null) {
      throw new ApiException(400, "Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridDelete");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountid}/user/{userid}"
      .replaceAll("\\{" + "accountid" + "\\}", apiClient.escapeString(accountid.toString()))
      .replaceAll("\\{" + "userid" + "\\}", apiClient.escapeString(userid.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsUserGetSingle> localVarReturnType = new GenericType<ServiceDocsUserGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get User Details
   * View specific user details.
   * @param accountid Account ID, 32 alpha numeric (required)
   * @param userid User ID, 32 alpha numeric (required)
   * @return ServiceDocsUserGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsUserGetSingle v1AccountAccountidUserUseridGet(String accountid, String userid) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      throw new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridGet");
    }
    
    // verify the required parameter 'userid' is set
    if (userid == null) {
      throw new ApiException(400, "Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridGet");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountid}/user/{userid}"
      .replaceAll("\\{" + "accountid" + "\\}", apiClient.escapeString(accountid.toString()))
      .replaceAll("\\{" + "userid" + "\\}", apiClient.escapeString(userid.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsUserGetSingle> localVarReturnType = new GenericType<ServiceDocsUserGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Update User
   * Keep user information current. Modify the first and last name, extension, and other pertinent information.
   * @param accountid Account ID, 32 alpha numeric (required)
   * @param userid User ID, 32 alpha numeric (required)
   * @param user user fields (required)
   * @return ServiceDocsUserGetSingle
   * @throws ApiException if fails to make API call
   */
  public ServiceDocsUserGetSingle v1AccountAccountidUserUseridPut(String accountid, String userid, ServiceVOIPUserAdd2 user) throws ApiException {
    Object localVarPostBody = user;
    
    // verify the required parameter 'accountid' is set
    if (accountid == null) {
      throw new ApiException(400, "Missing the required parameter 'accountid' when calling v1AccountAccountidUserUseridPut");
    }
    
    // verify the required parameter 'userid' is set
    if (userid == null) {
      throw new ApiException(400, "Missing the required parameter 'userid' when calling v1AccountAccountidUserUseridPut");
    }
    
    // verify the required parameter 'user' is set
    if (user == null) {
      throw new ApiException(400, "Missing the required parameter 'user' when calling v1AccountAccountidUserUseridPut");
    }
    
    // create path and map variables
    String localVarPath = "/v1/account/{accountid}/user/{userid}"
      .replaceAll("\\{" + "accountid" + "\\}", apiClient.escapeString(accountid.toString()))
      .replaceAll("\\{" + "userid" + "\\}", apiClient.escapeString(userid.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "BearerAuth" };

    GenericType<ServiceDocsUserGetSingle> localVarReturnType = new GenericType<ServiceDocsUserGetSingle>() {};
    return apiClient.invokeAPI(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
