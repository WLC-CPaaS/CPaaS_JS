/**
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ServiceDocsWebhookDelete from '../model/ServiceDocsWebhookDelete';
import ServiceDocsWebhookGetAll from '../model/ServiceDocsWebhookGetAll';
import ServiceDocsWebhookGetSingle from '../model/ServiceDocsWebhookGetSingle';
import ServiceWebhookAdd from '../model/ServiceWebhookAdd';
import ServiceWebhookEdit from '../model/ServiceWebhookEdit';
import UtilCPAASError from '../model/UtilCPAASError';

/**
* Webhook service.
* @module api/WebhookApi
* @version 1.1
*/
export default class WebhookApi {

    /**
    * Constructs a new WebhookApi. 
    * @alias module:api/WebhookApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1WebhookAccountAccountIDGet operation.
     * @callback module:api/WebhookApi~v1WebhookAccountAccountIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsWebhookGetAll} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Webhook List
     * Retrieve the webhook list in an account.
     * @param {String} accountID Account ID
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] number of records to return, range 1 to 50
     * @param {Number} [currentPage] Current Page
     * @param {module:api/WebhookApi~v1WebhookAccountAccountIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsWebhookGetAll}
     */
    v1WebhookAccountAccountIDGet(accountID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling v1WebhookAccountAccountIDGet");
      }

      let pathParams = {
        'accountID': accountID
      };
      let queryParams = {
        'page_size': opts['pageSize'],
        'current_page': opts['currentPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ServiceDocsWebhookGetAll;
      return this.apiClient.callApi(
        '/v1/webhook/account/{accountID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1WebhookAccountAccountIDPost operation.
     * @callback module:api/WebhookApi~v1WebhookAccountAccountIDPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsWebhookGetSingle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Webhook
     * Create a webhook for a specific account ID.
     * @param {String} accountID Account ID
     * @param {module:model/ServiceWebhookAdd} body Webhook data
     * @param {module:api/WebhookApi~v1WebhookAccountAccountIDPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsWebhookGetSingle}
     */
    v1WebhookAccountAccountIDPost(accountID, body, callback) {
      let postBody = body;
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling v1WebhookAccountAccountIDPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v1WebhookAccountAccountIDPost");
      }

      let pathParams = {
        'accountID': accountID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ServiceDocsWebhookGetSingle;
      return this.apiClient.callApi(
        '/v1/webhook/account/{accountID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1WebhookAccountAccountIDWebhookIDDelete operation.
     * @callback module:api/WebhookApi~v1WebhookAccountAccountIDWebhookIDDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsWebhookDelete} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Webhook
     * Remove a webhook identified by its ID for a particular account ID.
     * @param {String} accountID Account ID
     * @param {Number} webhookID Webhook ID
     * @param {module:api/WebhookApi~v1WebhookAccountAccountIDWebhookIDDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsWebhookDelete}
     */
    v1WebhookAccountAccountIDWebhookIDDelete(accountID, webhookID, callback) {
      let postBody = null;
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling v1WebhookAccountAccountIDWebhookIDDelete");
      }
      // verify the required parameter 'webhookID' is set
      if (webhookID === undefined || webhookID === null) {
        throw new Error("Missing the required parameter 'webhookID' when calling v1WebhookAccountAccountIDWebhookIDDelete");
      }

      let pathParams = {
        'accountID': accountID,
        'webhookID': webhookID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ServiceDocsWebhookDelete;
      return this.apiClient.callApi(
        '/v1/webhook/account/{accountID}/{webhookID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1WebhookAccountAccountIDWebhookIDGet operation.
     * @callback module:api/WebhookApi~v1WebhookAccountAccountIDWebhookIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsWebhookGetSingle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Webhook Details
     * Access details about a single webhook ID for an individual account ID.
     * @param {String} accountID Account ID
     * @param {Number} webhookID Webhook ID
     * @param {module:api/WebhookApi~v1WebhookAccountAccountIDWebhookIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsWebhookGetSingle}
     */
    v1WebhookAccountAccountIDWebhookIDGet(accountID, webhookID, callback) {
      let postBody = null;
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling v1WebhookAccountAccountIDWebhookIDGet");
      }
      // verify the required parameter 'webhookID' is set
      if (webhookID === undefined || webhookID === null) {
        throw new Error("Missing the required parameter 'webhookID' when calling v1WebhookAccountAccountIDWebhookIDGet");
      }

      let pathParams = {
        'accountID': accountID,
        'webhookID': webhookID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ServiceDocsWebhookGetSingle;
      return this.apiClient.callApi(
        '/v1/webhook/account/{accountID}/{webhookID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1WebhookAccountAccountIDWebhookIDPut operation.
     * @callback module:api/WebhookApi~v1WebhookAccountAccountIDWebhookIDPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDocsWebhookGetSingle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Webhook
     * Update a webhook identified by its ID for a distinct account ID.
     * @param {String} accountID Account ID
     * @param {String} webhookID Webhook ID
     * @param {module:model/ServiceWebhookEdit} body Updated webhook data
     * @param {module:api/WebhookApi~v1WebhookAccountAccountIDWebhookIDPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDocsWebhookGetSingle}
     */
    v1WebhookAccountAccountIDWebhookIDPut(accountID, webhookID, body, callback) {
      let postBody = body;
      // verify the required parameter 'accountID' is set
      if (accountID === undefined || accountID === null) {
        throw new Error("Missing the required parameter 'accountID' when calling v1WebhookAccountAccountIDWebhookIDPut");
      }
      // verify the required parameter 'webhookID' is set
      if (webhookID === undefined || webhookID === null) {
        throw new Error("Missing the required parameter 'webhookID' when calling v1WebhookAccountAccountIDWebhookIDPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v1WebhookAccountAccountIDWebhookIDPut");
      }

      let pathParams = {
        'accountID': accountID,
        'webhookID': webhookID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ServiceDocsWebhookGetSingle;
      return this.apiClient.callApi(
        '/v1/webhook/account/{accountID}/{webhookID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
