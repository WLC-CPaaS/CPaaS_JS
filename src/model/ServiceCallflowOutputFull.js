/**
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ServiceCallflowAddEditFlowData from './ServiceCallflowAddEditFlowData';
import ServiceFeatureCode from './ServiceFeatureCode';

/**
 * The ServiceCallflowOutputFull model module.
 * @module model/ServiceCallflowOutputFull
 * @version 1.1
 */
class ServiceCallflowOutputFull {
    /**
     * Constructs a new <code>ServiceCallflowOutputFull</code>.
     * @alias module:model/ServiceCallflowOutputFull
     * @param flow {module:model/ServiceCallflowAddEditFlowData} 
     * @param numbers {Array.<String>} 
     * @param patterns {Array.<String>} 
     */
    constructor(flow, numbers, patterns) { 
        
        ServiceCallflowOutputFull.initialize(this, flow, numbers, patterns);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, flow, numbers, patterns) { 
        obj['flow'] = flow;
        obj['numbers'] = numbers;
        obj['patterns'] = patterns;
    }

    /**
     * Constructs a <code>ServiceCallflowOutputFull</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceCallflowOutputFull} obj Optional instance to populate.
     * @return {module:model/ServiceCallflowOutputFull} The populated <code>ServiceCallflowOutputFull</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceCallflowOutputFull();

            if (data.hasOwnProperty('featurecode')) {
                obj['featurecode'] = ServiceFeatureCode.constructFromObject(data['featurecode']);
            }
            if (data.hasOwnProperty('flow')) {
                obj['flow'] = ServiceCallflowAddEditFlowData.constructFromObject(data['flow']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('numbers')) {
                obj['numbers'] = ApiClient.convertToType(data['numbers'], ['String']);
            }
            if (data.hasOwnProperty('patterns')) {
                obj['patterns'] = ApiClient.convertToType(data['patterns'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceCallflowOutputFull</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceCallflowOutputFull</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServiceCallflowOutputFull.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `featurecode`
        if (data['featurecode']) { // data not null
          ServiceFeatureCode.validateJSON(data['featurecode']);
        }
        // validate the optional field `flow`
        if (data['flow']) { // data not null
          ServiceCallflowAddEditFlowData.validateJSON(data['flow']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['numbers'])) {
            throw new Error("Expected the field `numbers` to be an array in the JSON data but got " + data['numbers']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['patterns'])) {
            throw new Error("Expected the field `patterns` to be an array in the JSON data but got " + data['patterns']);
        }

        return true;
    }


}

ServiceCallflowOutputFull.RequiredProperties = ["flow", "numbers", "patterns"];

/**
 * @member {module:model/ServiceFeatureCode} featurecode
 */
ServiceCallflowOutputFull.prototype['featurecode'] = undefined;

/**
 * @member {module:model/ServiceCallflowAddEditFlowData} flow
 */
ServiceCallflowOutputFull.prototype['flow'] = undefined;

/**
 * @member {String} id
 */
ServiceCallflowOutputFull.prototype['id'] = undefined;

/**
 * @member {String} name
 */
ServiceCallflowOutputFull.prototype['name'] = undefined;

/**
 * @member {Array.<String>} numbers
 */
ServiceCallflowOutputFull.prototype['numbers'] = undefined;

/**
 * @member {Array.<String>} patterns
 */
ServiceCallflowOutputFull.prototype['patterns'] = undefined;






export default ServiceCallflowOutputFull;

