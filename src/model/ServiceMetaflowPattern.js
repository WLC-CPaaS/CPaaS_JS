/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;

/**
 * ServiceMetaflowPattern
 */
@.annotation.Generated(value = "org.openapitools.codegen.languages.JavascriptClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class ServiceMetaflowPattern {
  @.annotation.Nullable
  private {String: ServiceMetaflowPattern} children;

  @.annotation.Nullable
  private {String: Object} data;

  /**
   * Gets or Sets module
   */
  public enum ModuleEnum {
    transfer(String.valueOf("transfer")),
    
    hold(String.valueOf("hold")),
    
    record_call(String.valueOf("record_call"));

    private String value;

    ModuleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModuleEnum fromValue(String value) {
      for (ModuleEnum b : ModuleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @.annotation.Nonnull
  private ModuleEnum module;

  public ServiceMetaflowPattern() {
  }

  public ServiceMetaflowPattern children(@.annotation.Nullable {String: ServiceMetaflowPattern} children) {
    
    this.children = children;
    return this;
  }

  public ServiceMetaflowPattern putChildrenItem(String key, ServiceMetaflowPattern childrenItem) {
    if (this.children == null) {
      this.children = new HashMap<>();
    }
    this.children.put(key, childrenItem);
    return this;
  }

  /**
   * Get children
   * @return children
   */
  @.annotation.Nullable

  public {String: ServiceMetaflowPattern} getChildren() {
    return children;
  }


  public void setChildren(@.annotation.Nullable {String: ServiceMetaflowPattern} children) {
    this.children = children;
  }

  public ServiceMetaflowPattern data(@.annotation.Nullable {String: Object} data) {
    
    this.data = data;
    return this;
  }

  public ServiceMetaflowPattern putDataItem(String key, Object dataItem) {
    if (this.data == null) {
      this.data = new HashMap<>();
    }
    this.data.put(key, dataItem);
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @.annotation.Nullable

  public {String: Object} getData() {
    return data;
  }


  public void setData(@.annotation.Nullable {String: Object} data) {
    this.data = data;
  }

  public ServiceMetaflowPattern module(@.annotation.Nonnull ModuleEnum module) {
    
    this.module = module;
    return this;
  }

  /**
   * Get module
   * @return module
   */
  @.annotation.Nonnull

  public ModuleEnum getModule() {
    return module;
  }


  public void setModule(@.annotation.Nonnull ModuleEnum module) {
    this.module = module;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceMetaflowPattern serviceMetaflowPattern = (ServiceMetaflowPattern) o;
    return Objects.equals(this.children, serviceMetaflowPattern.children) &&
        Objects.equals(this.data, serviceMetaflowPattern.data) &&
        Objects.equals(this.module, serviceMetaflowPattern.module);
  }

  @Override
  public int hashCode() {
    return Objects.hash(children, data, module);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceMetaflowPattern {\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    module: ").append(toIndentedString(module)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

