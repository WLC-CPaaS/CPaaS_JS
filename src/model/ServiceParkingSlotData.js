/**
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ServiceParkingSlotData model module.
 * @module model/ServiceParkingSlotData
 * @version 1.1
 */
class ServiceParkingSlotData {
    /**
     * Constructs a new <code>ServiceParkingSlotData</code>.
     * @alias module:model/ServiceParkingSlotData
     */
    constructor() { 
        
        ServiceParkingSlotData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceParkingSlotData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceParkingSlotData} obj Optional instance to populate.
     * @return {module:model/ServiceParkingSlotData} The populated <code>ServiceParkingSlotData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceParkingSlotData();

            if (data.hasOwnProperty('attended')) {
                obj['attended'] = ApiClient.convertToType(data['attended'], 'Boolean');
            }
            if (data.hasOwnProperty('call_id')) {
                obj['call_id'] = ApiClient.convertToType(data['call_id'], 'String');
            }
            if (data.hasOwnProperty('cid_name')) {
                obj['cid_name'] = ApiClient.convertToType(data['cid_name'], 'String');
            }
            if (data.hasOwnProperty('cid_number')) {
                obj['cid_number'] = ApiClient.convertToType(data['cid_number'], 'String');
            }
            if (data.hasOwnProperty('cid_uri')) {
                obj['cid_uri'] = ApiClient.convertToType(data['cid_uri'], 'String');
            }
            if (data.hasOwnProperty('from_tag')) {
                obj['from_tag'] = ApiClient.convertToType(data['from_tag'], 'String');
            }
            if (data.hasOwnProperty('node')) {
                obj['node'] = ApiClient.convertToType(data['node'], 'String');
            }
            if (data.hasOwnProperty('presence_id')) {
                obj['presence_id'] = ApiClient.convertToType(data['presence_id'], 'String');
            }
            if (data.hasOwnProperty('presence_realm')) {
                obj['presence_realm'] = ApiClient.convertToType(data['presence_realm'], 'String');
            }
            if (data.hasOwnProperty('presence_type')) {
                obj['presence_type'] = ApiClient.convertToType(data['presence_type'], 'String');
            }
            if (data.hasOwnProperty('presence_user')) {
                obj['presence_user'] = ApiClient.convertToType(data['presence_user'], 'String');
            }
            if (data.hasOwnProperty('ringback_id')) {
                obj['ringback_id'] = ApiClient.convertToType(data['ringback_id'], 'String');
            }
            if (data.hasOwnProperty('slot_call_id')) {
                obj['slot_call_id'] = ApiClient.convertToType(data['slot_call_id'], 'String');
            }
            if (data.hasOwnProperty('switch_uri')) {
                obj['switch_uri'] = ApiClient.convertToType(data['switch_uri'], 'String');
            }
            if (data.hasOwnProperty('to_tag')) {
                obj['to_tag'] = ApiClient.convertToType(data['to_tag'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceParkingSlotData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceParkingSlotData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['call_id'] && !(typeof data['call_id'] === 'string' || data['call_id'] instanceof String)) {
            throw new Error("Expected the field `call_id` to be a primitive type in the JSON string but got " + data['call_id']);
        }
        // ensure the json data is a string
        if (data['cid_name'] && !(typeof data['cid_name'] === 'string' || data['cid_name'] instanceof String)) {
            throw new Error("Expected the field `cid_name` to be a primitive type in the JSON string but got " + data['cid_name']);
        }
        // ensure the json data is a string
        if (data['cid_number'] && !(typeof data['cid_number'] === 'string' || data['cid_number'] instanceof String)) {
            throw new Error("Expected the field `cid_number` to be a primitive type in the JSON string but got " + data['cid_number']);
        }
        // ensure the json data is a string
        if (data['cid_uri'] && !(typeof data['cid_uri'] === 'string' || data['cid_uri'] instanceof String)) {
            throw new Error("Expected the field `cid_uri` to be a primitive type in the JSON string but got " + data['cid_uri']);
        }
        // ensure the json data is a string
        if (data['from_tag'] && !(typeof data['from_tag'] === 'string' || data['from_tag'] instanceof String)) {
            throw new Error("Expected the field `from_tag` to be a primitive type in the JSON string but got " + data['from_tag']);
        }
        // ensure the json data is a string
        if (data['node'] && !(typeof data['node'] === 'string' || data['node'] instanceof String)) {
            throw new Error("Expected the field `node` to be a primitive type in the JSON string but got " + data['node']);
        }
        // ensure the json data is a string
        if (data['presence_id'] && !(typeof data['presence_id'] === 'string' || data['presence_id'] instanceof String)) {
            throw new Error("Expected the field `presence_id` to be a primitive type in the JSON string but got " + data['presence_id']);
        }
        // ensure the json data is a string
        if (data['presence_realm'] && !(typeof data['presence_realm'] === 'string' || data['presence_realm'] instanceof String)) {
            throw new Error("Expected the field `presence_realm` to be a primitive type in the JSON string but got " + data['presence_realm']);
        }
        // ensure the json data is a string
        if (data['presence_type'] && !(typeof data['presence_type'] === 'string' || data['presence_type'] instanceof String)) {
            throw new Error("Expected the field `presence_type` to be a primitive type in the JSON string but got " + data['presence_type']);
        }
        // ensure the json data is a string
        if (data['presence_user'] && !(typeof data['presence_user'] === 'string' || data['presence_user'] instanceof String)) {
            throw new Error("Expected the field `presence_user` to be a primitive type in the JSON string but got " + data['presence_user']);
        }
        // ensure the json data is a string
        if (data['ringback_id'] && !(typeof data['ringback_id'] === 'string' || data['ringback_id'] instanceof String)) {
            throw new Error("Expected the field `ringback_id` to be a primitive type in the JSON string but got " + data['ringback_id']);
        }
        // ensure the json data is a string
        if (data['slot_call_id'] && !(typeof data['slot_call_id'] === 'string' || data['slot_call_id'] instanceof String)) {
            throw new Error("Expected the field `slot_call_id` to be a primitive type in the JSON string but got " + data['slot_call_id']);
        }
        // ensure the json data is a string
        if (data['switch_uri'] && !(typeof data['switch_uri'] === 'string' || data['switch_uri'] instanceof String)) {
            throw new Error("Expected the field `switch_uri` to be a primitive type in the JSON string but got " + data['switch_uri']);
        }
        // ensure the json data is a string
        if (data['to_tag'] && !(typeof data['to_tag'] === 'string' || data['to_tag'] instanceof String)) {
            throw new Error("Expected the field `to_tag` to be a primitive type in the JSON string but got " + data['to_tag']);
        }

        return true;
    }


}



/**
 * @member {Boolean} attended
 */
ServiceParkingSlotData.prototype['attended'] = undefined;

/**
 * @member {String} call_id
 */
ServiceParkingSlotData.prototype['call_id'] = undefined;

/**
 * @member {String} cid_name
 */
ServiceParkingSlotData.prototype['cid_name'] = undefined;

/**
 * @member {String} cid_number
 */
ServiceParkingSlotData.prototype['cid_number'] = undefined;

/**
 * @member {String} cid_uri
 */
ServiceParkingSlotData.prototype['cid_uri'] = undefined;

/**
 * @member {String} from_tag
 */
ServiceParkingSlotData.prototype['from_tag'] = undefined;

/**
 * @member {String} node
 */
ServiceParkingSlotData.prototype['node'] = undefined;

/**
 * @member {String} presence_id
 */
ServiceParkingSlotData.prototype['presence_id'] = undefined;

/**
 * @member {String} presence_realm
 */
ServiceParkingSlotData.prototype['presence_realm'] = undefined;

/**
 * @member {String} presence_type
 */
ServiceParkingSlotData.prototype['presence_type'] = undefined;

/**
 * @member {String} presence_user
 */
ServiceParkingSlotData.prototype['presence_user'] = undefined;

/**
 * @member {String} ringback_id
 */
ServiceParkingSlotData.prototype['ringback_id'] = undefined;

/**
 * @member {String} slot_call_id
 */
ServiceParkingSlotData.prototype['slot_call_id'] = undefined;

/**
 * @member {String} switch_uri
 */
ServiceParkingSlotData.prototype['switch_uri'] = undefined;

/**
 * @member {String} to_tag
 */
ServiceParkingSlotData.prototype['to_tag'] = undefined;






export default ServiceParkingSlotData;

