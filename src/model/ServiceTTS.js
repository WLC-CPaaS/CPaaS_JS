/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;

/**
 * ServiceTTS
 */
@.annotation.Generated(value = "org.openapitools.codegen.languages.JavascriptClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class ServiceTTS {
  @.annotation.Nonnull
  private String text;

  /**
   * Gets or Sets voice
   */
  public enum VoiceEnum {
    female/en-US(String.valueOf("female/en-US")),
    
    male/en-US(String.valueOf("male/en-US")),
    
    female/en-CA(String.valueOf("female/en-CA")),
    
    female/en-AU(String.valueOf("female/en-AU")),
    
    female/en-GB(String.valueOf("female/en-GB")),
    
    male/en-GB(String.valueOf("male/en-GB")),
    
    female/es-US(String.valueOf("female/es-US")),
    
    male/es-US(String.valueOf("male/es-US")),
    
    female/us-US(String.valueOf("female/us-US")),
    
    female/zh-CN(String.valueOf("female/zh-CN")),
    
    male/zh-CN(String.valueOf("male/zh-CN")),
    
    female/zh-HK(String.valueOf("female/zh-HK")),
    
    female/zh-TW(String.valueOf("female/zh-TW")),
    
    female/ja-JP(String.valueOf("female/ja-JP")),
    
    male/ja-JP(String.valueOf("male/ja-JP")),
    
    female/ko-KR(String.valueOf("female/ko-KR")),
    
    male/ko-KR(String.valueOf("male/ko-KR")),
    
    female/da-DK(String.valueOf("female/da-DK")),
    
    female/de-DE(String.valueOf("female/de-DE")),
    
    male/de-DE(String.valueOf("male/de-DE")),
    
    female/ca-ES(String.valueOf("female/ca-ES")),
    
    female/es-ES(String.valueOf("female/es-ES")),
    
    male/es-ES(String.valueOf("male/es-ES")),
    
    female/fi-FI(String.valueOf("female/fi-FI")),
    
    female/fr-CA(String.valueOf("female/fr-CA")),
    
    male/fr-CA(String.valueOf("male/fr-CA")),
    
    female/fr-FR(String.valueOf("female/fr-FR")),
    
    male/fr-FR(String.valueOf("male/fr-FR")),
    
    female/it-IT(String.valueOf("female/it-IT")),
    
    male/it-IT(String.valueOf("male/it-IT")),
    
    female/nb-NO(String.valueOf("female/nb-NO")),
    
    female/nl-NL(String.valueOf("female/nl-NL")),
    
    female/pl-PL(String.valueOf("female/pl-PL")),
    
    female/pt-BR(String.valueOf("female/pt-BR")),
    
    female/pt-PT(String.valueOf("female/pt-PT")),
    
    male/pt-PT(String.valueOf("male/pt-PT")),
    
    female/ru-RU(String.valueOf("female/ru-RU")),
    
    male/ru-RU(String.valueOf("male/ru-RU")),
    
    female/sv-SE(String.valueOf("female/sv-SE")),
    
    female/hu-HU(String.valueOf("female/hu-HU")),
    
    female/cs-CZ(String.valueOf("female/cs-CZ")),
    
    female/tr-TR(String.valueOf("female/tr-TR")),
    
    male/tr-TR(String.valueOf("male/tr-TR")),
    
    male/ru-RU/Vladimir(String.valueOf("male/ru-RU/Vladimir")),
    
    female/ru-RU/Julia(String.valueOf("female/ru-RU/Julia")),
    
    female/ru-RU/Anna(String.valueOf("female/ru-RU/Anna")),
    
    female/ru-RU/Viktoria(String.valueOf("female/ru-RU/Viktoria")),
    
    male/ru-RU/Alexander(String.valueOf("male/ru-RU/Alexander")),
    
    female/ru-RU/Maria(String.valueOf("female/ru-RU/Maria")),
    
    female/ru-RU/Lidia(String.valueOf("female/ru-RU/Lidia")),
    
    es-ES-Standard-A(String.valueOf("es-ES-Standard-A")),
    
    it-IT-Standard-A(String.valueOf("it-IT-Standard-A")),
    
    ja-JP-Standard-A(String.valueOf("ja-JP-Standard-A")),
    
    ko-KR-Standard-A(String.valueOf("ko-KR-Standard-A")),
    
    pt-BR-Standard-A(String.valueOf("pt-BR-Standard-A")),
    
    tr-TR-Standard-A(String.valueOf("tr-TR-Standard-A")),
    
    sv-SE-Standard-A(String.valueOf("sv-SE-Standard-A")),
    
    nl-NL-Standard-A(String.valueOf("nl-NL-Standard-A")),
    
    en-US-Wavenet-D(String.valueOf("en-US-Wavenet-D")),
    
    de-DE-Wavenet-A(String.valueOf("de-DE-Wavenet-A")),
    
    de-DE-Wavenet-B(String.valueOf("de-DE-Wavenet-B")),
    
    de-DE-Wavenet-C(String.valueOf("de-DE-Wavenet-C")),
    
    de-DE-Wavenet-D(String.valueOf("de-DE-Wavenet-D")),
    
    en-AU-Wavenet-A(String.valueOf("en-AU-Wavenet-A")),
    
    en-AU-Wavenet-B(String.valueOf("en-AU-Wavenet-B")),
    
    en-AU-Wavenet-C(String.valueOf("en-AU-Wavenet-C")),
    
    en-AU-Wavenet-D(String.valueOf("en-AU-Wavenet-D")),
    
    en-GB-Wavenet-A(String.valueOf("en-GB-Wavenet-A")),
    
    en-GB-Wavenet-B(String.valueOf("en-GB-Wavenet-B")),
    
    en-GB-Wavenet-C(String.valueOf("en-GB-Wavenet-C")),
    
    en-GB-Wavenet-D(String.valueOf("en-GB-Wavenet-D")),
    
    en-US-Wavenet-A(String.valueOf("en-US-Wavenet-A")),
    
    en-US-Wavenet-B(String.valueOf("en-US-Wavenet-B")),
    
    en-US-Wavenet-C(String.valueOf("en-US-Wavenet-C")),
    
    en-US-Wavenet-E(String.valueOf("en-US-Wavenet-E")),
    
    en-US-Wavenet-F(String.valueOf("en-US-Wavenet-F")),
    
    fr-FR-Wavenet-A(String.valueOf("fr-FR-Wavenet-A")),
    
    fr-FR-Wavenet-B(String.valueOf("fr-FR-Wavenet-B")),
    
    fr-FR-Wavenet-C(String.valueOf("fr-FR-Wavenet-C")),
    
    fr-FR-Wavenet-D(String.valueOf("fr-FR-Wavenet-D")),
    
    it-IT-Wavenet-A(String.valueOf("it-IT-Wavenet-A")),
    
    ja-JP-Wavenet-A(String.valueOf("ja-JP-Wavenet-A")),
    
    nl-NL-Wavenet-A(String.valueOf("nl-NL-Wavenet-A")),
    
    en-GB-Standard-A(String.valueOf("en-GB-Standard-A")),
    
    en-GB-Standard-B(String.valueOf("en-GB-Standard-B")),
    
    en-GB-Standard-C(String.valueOf("en-GB-Standard-C")),
    
    en-GB-Standard-D(String.valueOf("en-GB-Standard-D")),
    
    en-US-Standard-B(String.valueOf("en-US-Standard-B")),
    
    en-US-Standard-C(String.valueOf("en-US-Standard-C")),
    
    en-US-Standard-D(String.valueOf("en-US-Standard-D")),
    
    en-US-Standard-E(String.valueOf("en-US-Standard-E")),
    
    de-DE-Standard-A(String.valueOf("de-DE-Standard-A")),
    
    de-DE-Standard-B(String.valueOf("de-DE-Standard-B")),
    
    en-AU-Standard-A(String.valueOf("en-AU-Standard-A")),
    
    en-AU-Standard-B(String.valueOf("en-AU-Standard-B")),
    
    en-AU-Standard-C(String.valueOf("en-AU-Standard-C")),
    
    en-AU-Standard-D(String.valueOf("en-AU-Standard-D")),
    
    fr-CA-Standard-A(String.valueOf("fr-CA-Standard-A")),
    
    fr-CA-Standard-B(String.valueOf("fr-CA-Standard-B")),
    
    fr-CA-Standard-C(String.valueOf("fr-CA-Standard-C")),
    
    fr-CA-Standard-D(String.valueOf("fr-CA-Standard-D")),
    
    fr-FR-Standard-A(String.valueOf("fr-FR-Standard-A")),
    
    fr-FR-Standard-B(String.valueOf("fr-FR-Standard-B")),
    
    fr-FR-Standard-C(String.valueOf("fr-FR-Standard-C")),
    
    fr-FR-Standard-D(String.valueOf("fr-FR-Standard-D"));

    private String value;

    VoiceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VoiceEnum fromValue(String value) {
      for (VoiceEnum b : VoiceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @.annotation.Nullable
  private VoiceEnum voice;

  public ServiceTTS() {
  }

  public ServiceTTS text(@.annotation.Nonnull String text) {
    
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @.annotation.Nonnull

  public String getText() {
    return text;
  }


  public void setText(@.annotation.Nonnull String text) {
    this.text = text;
  }

  public ServiceTTS voice(@.annotation.Nullable VoiceEnum voice) {
    
    this.voice = voice;
    return this;
  }

  /**
   * Get voice
   * @return voice
   */
  @.annotation.Nullable

  public VoiceEnum getVoice() {
    return voice;
  }


  public void setVoice(@.annotation.Nullable VoiceEnum voice) {
    this.voice = voice;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceTTS serviceTTS = (ServiceTTS) o;
    return Objects.equals(this.text, serviceTTS.text) &&
        Objects.equals(this.voice, serviceTTS.voice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(text, voice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceTTS {\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    voice: ").append(toIndentedString(voice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

