/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import java.util.Arrays;

/**
 * ServiceWebhookAdd
 */
@.annotation.Generated(value = "org.openapitools.codegen.languages.JavascriptClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class ServiceWebhookAdd {
  /**
   * Gets or Sets callbackMethod
   */
  public enum CallbackMethodEnum {
    POST(String.valueOf("POST")),
    
    PUT(String.valueOf("PUT"));

    private String value;

    CallbackMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CallbackMethodEnum fromValue(String value) {
      for (CallbackMethodEnum b : CallbackMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @.annotation.Nonnull
  private CallbackMethodEnum callbackMethod;

  @.annotation.Nonnull
  private String callbackUrl;

  @.annotation.Nullable
  private {String: Object} data;

  @.annotation.Nonnull
  private String title;

  @.annotation.Nonnull
  private String webhookType;

  public ServiceWebhookAdd() {
  }

  public ServiceWebhookAdd callbackMethod(@.annotation.Nonnull CallbackMethodEnum callbackMethod) {
    
    this.callbackMethod = callbackMethod;
    return this;
  }

  /**
   * Get callbackMethod
   * @return callbackMethod
   */
  @.annotation.Nonnull

  public CallbackMethodEnum getCallbackMethod() {
    return callbackMethod;
  }


  public void setCallbackMethod(@.annotation.Nonnull CallbackMethodEnum callbackMethod) {
    this.callbackMethod = callbackMethod;
  }

  public ServiceWebhookAdd callbackUrl(@.annotation.Nonnull String callbackUrl) {
    
    this.callbackUrl = callbackUrl;
    return this;
  }

  /**
   * Get callbackUrl
   * @return callbackUrl
   */
  @.annotation.Nonnull

  public String getCallbackUrl() {
    return callbackUrl;
  }


  public void setCallbackUrl(@.annotation.Nonnull String callbackUrl) {
    this.callbackUrl = callbackUrl;
  }

  public ServiceWebhookAdd data(@.annotation.Nullable {String: Object} data) {
    
    this.data = data;
    return this;
  }

  public ServiceWebhookAdd putDataItem(String key, Object dataItem) {
    if (this.data == null) {
      this.data = new HashMap<>();
    }
    this.data.put(key, dataItem);
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @.annotation.Nullable

  public {String: Object} getData() {
    return data;
  }


  public void setData(@.annotation.Nullable {String: Object} data) {
    this.data = data;
  }

  public ServiceWebhookAdd title(@.annotation.Nonnull String title) {
    
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @.annotation.Nonnull

  public String getTitle() {
    return title;
  }


  public void setTitle(@.annotation.Nonnull String title) {
    this.title = title;
  }

  public ServiceWebhookAdd webhookType(@.annotation.Nonnull String webhookType) {
    
    this.webhookType = webhookType;
    return this;
  }

  /**
   * Get webhookType
   * @return webhookType
   */
  @.annotation.Nonnull

  public String getWebhookType() {
    return webhookType;
  }


  public void setWebhookType(@.annotation.Nonnull String webhookType) {
    this.webhookType = webhookType;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceWebhookAdd serviceWebhookAdd = (ServiceWebhookAdd) o;
    return Objects.equals(this.callbackMethod, serviceWebhookAdd.callbackMethod) &&
        Objects.equals(this.callbackUrl, serviceWebhookAdd.callbackUrl) &&
        Objects.equals(this.data, serviceWebhookAdd.data) &&
        Objects.equals(this.title, serviceWebhookAdd.title) &&
        Objects.equals(this.webhookType, serviceWebhookAdd.webhookType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callbackMethod, callbackUrl, data, title, webhookType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceWebhookAdd {\n");
    sb.append("    callbackMethod: ").append(toIndentedString(callbackMethod)).append("\n");
    sb.append("    callbackUrl: ").append(toIndentedString(callbackUrl)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    webhookType: ").append(toIndentedString(webhookType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

