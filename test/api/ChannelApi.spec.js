/*
 * White Label Communications CPaas API Documentation
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import .ApiException;
import ServiceAPIResponse;
import ServiceChannelRunActionData;
import ServiceChannelRunMetaflowData;
import ServiceDocsChannelGet;
import ServiceDocsChannelGetSingle;
import UtilCPAASError;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChannelApi
 */
class ChannelApiTest {

    private final ChannelApi api = new ChannelApi();

    /**
     * Get Channel Details
     *
     * Access details about each channel in an account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    void v1AccountAccountIDChannelChannelIDGetTest() throws ApiException {
        //
        //String accountID = null;
        //
        //String channelID = null;
        //
        //ServiceDocsChannelGetSingle response = api.v1AccountAccountIDChannelChannelIDGet(accountID, channelID);

        // TODO: test validations
    }
    /**
     * Associate Action to Channel
     *
     * Link an action, such as transfer or hangup to a channel.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    void v1AccountAccountIDChannelChannelIDPostTest() throws ApiException {
        //
        //String accountID = null;
        //
        //String channelID = null;
        //
        //ServiceChannelRunActionData reqBody = null;
        //
        //ServiceAPIResponse response = api.v1AccountAccountIDChannelChannelIDPost(accountID, channelID, reqBody);

        // TODO: test validations
    }
    /**
     * Associate Metaflow to Channel
     *
     * Link a metaflow to an active channel.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    void v1AccountAccountIDChannelChannelIDPutTest() throws ApiException {
        //
        //String accountID = null;
        //
        //String channelID = null;
        //
        //ServiceChannelRunMetaflowData reqBody = null;
        //
        //ServiceAPIResponse response = api.v1AccountAccountIDChannelChannelIDPut(accountID, channelID, reqBody);

        // TODO: test validations
    }
    /**
     * Get Account Channel List
     *
     * Get a list of active channels for an account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    void v1AccountAccountIDChannelGetTest() throws ApiException {
        //
        //String accountID = null;
        //
        //ServiceDocsChannelGet response = api.v1AccountAccountIDChannelGet(accountID);

        // TODO: test validations
    }
    /**
     * Get Device Channel List
     *
     * Get the list of active channels for a device.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    void v1AccountAccountIDDeviceDeviceIDChannelGetTest() throws ApiException {
        //
        //String accountID = null;
        //
        //String deviceID = null;
        //
        //ServiceDocsChannelGet response = api.v1AccountAccountIDDeviceDeviceIDChannelGet(accountID, deviceID);

        // TODO: test validations
    }
    /**
     * Get User Channel List
     *
     * Get the list of active channels for a user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    void v1AccountAccountIDUserUserIDChannelGetTest() throws ApiException {
        //
        //String accountID = null;
        //
        //String userID = null;
        //
        //ServiceDocsChannelGet response = api.v1AccountAccountIDUserUserIDChannelGet(accountID, userID);

        // TODO: test validations
    }
}
